{"version":3,"sources":["dist/cdp-cli.js"],"names":["module","exports","modules","installedModules","__webpack_require__","moduleId","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","require","path","inquirer","cdp_lib_1","fs","Utils","chalk","_","PromptBase","[object Object]","this","_answers","_locale","cmdInfo","_cmdInfo","Promise","resolve","reject","showPrologue","inquireLanguage","then","inquire","settings","catch","reason","message","GREETING","cyan","yellow","red","console","log","lang","answers","prologueComment","gray","say","update","merge","prompt","questions","config","itemName","color","item","error","process","exit","prop","props","bool","label","locale","JSON","parse","readFileSync","join","pkgDir","toString","Error","question","type","choices","default","answer","loadLanguage","language","displaySettingsByAnswers","common","confirm","confirmation","action","minify","cliOptions","force","verbose","silent","targetDir","proc","inquireSettings","updateAnswers","confirmSettings","reflectCommandInfo","setTimeout","libraryOnBrowser","projectType","es","env","tools","libraryOnNode","libraryOnElectron","mobileOnBrowser","platforms","projectStructure","external","hogan.js","acquisition","regular","hammerjs","subset","jquery-hammerjs","@types/hammerjs","cordova-plugin-cdp-nativebridge","cdp-nativebridge","cordova-plugin-inappbrowser","@types/cordova-plugin-inappbrowser","cordova-plugin-app-version","@types/cordova-plugin-app-version","iscroll","@types/iscroll","flipsnap","@types/flipsnap","desktopOnBrowser","desktopOnElectron","webOnBrowser","library","browser","node","electron","ELECTRON_AVAILABLE","mobile","desctop","web","command_parser_1","prompt_library_1","prompt_mobile_1","prompt_desktop_1","prompt_web_1","getInquirer","target","PromptLibrary","PromptMobileApp","PromptDesktopApp","PromptWebApp","main","title","CommandParser","argv","prompting","execute","green","finished","stringify","commander","options","cmdline","getPackageDirectory","pkg","version","option","command","description","on","test","underline","showHelp","noHelp","cmd","length","toCommandLineOptions","execDir","dirname","targetdir","inform","text","outputHelp","prompt_base_1","default_config_1","$","semverRegex","libConfig","projectName","validate","invalidMessage","filter","exec","license","apache2","mit","proprietary","Separator","LIMITATION","electronRenderer","extraSettings","recommended","custom","none","commonjs","umd","when","amd","es5","es2015","extend","items","recommend","forEach","undefined","config2description","stilNotAvailable","mobileConfig","EXTERNAL_DEFAULTS","defaults","keys","push","platforms_default","slice","projectStructure_default","external_default","appName","trim","dasherize","appId","toLowerCase","checked","indexOf","lib","porting","paginated","separator","cordova","disabled","noCordovaMessage","utils","lookup","_config","dependencies","devDependencies","cordova_plugin","resource_addon","resolveDependencies","moduleName","info","top","valid","sub","fixed","platformInfo","COLOR","cordovaPlugins"],"mappings":"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","sourcesContent":["﻿/*!\n * cdp-cli.js 0.0.2\n *\n * Date: 2017-06-19T02:53:54.831Z\n */\n\nmodule.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/     // The module cache\n/******/     var installedModules = {};\n/******/\n/******/     // The require function\n/******/     function __webpack_require__(moduleId) {\n/******/\n/******/         // Check if module is in cache\n/******/         if(installedModules[moduleId]) {\n/******/             return installedModules[moduleId].exports;\n/******/         }\n/******/         // Create a new module (and put it into the cache)\n/******/         var module = installedModules[moduleId] = {\n/******/             i: moduleId,\n/******/             l: false,\n/******/             exports: {}\n/******/         };\n/******/\n/******/         // Execute the module function\n/******/         modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/         // Flag the module as loaded\n/******/         module.l = true;\n/******/\n/******/         // Return the exports of the module\n/******/         return module.exports;\n/******/     }\n/******/\n/******/\n/******/     // expose the modules object (__webpack_modules__)\n/******/     __webpack_require__.m = modules;\n/******/\n/******/     // expose the module cache\n/******/     __webpack_require__.c = installedModules;\n/******/\n/******/     // identity function for calling harmony imports with the correct context\n/******/     __webpack_require__.i = function(value) { return value; };\n/******/\n/******/     // define getter function for harmony exports\n/******/     __webpack_require__.d = function(exports, name, getter) {\n/******/         if(!__webpack_require__.o(exports, name)) {\n/******/             Object.defineProperty(exports, name, {\n/******/                 configurable: false,\n/******/                 enumerable: true,\n/******/                 get: getter\n/******/             });\n/******/         }\n/******/     };\n/******/\n/******/     // getDefaultExport function for compatibility with non-harmony modules\n/******/     __webpack_require__.n = function(module) {\n/******/         var getter = module && module.__esModule ?\n/******/             function getDefault() { return module['default']; } :\n/******/             function getModuleExports() { return module; };\n/******/         __webpack_require__.d(getter, 'a', getter);\n/******/         return getter;\n/******/     };\n/******/\n/******/     // Object.prototype.hasOwnProperty.call\n/******/     __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/     // __webpack_public_path__\n/******/     __webpack_require__.p = \"\";\n/******/\n/******/     // Load entry module and return exports\n/******/     return __webpack_require__(__webpack_require__.s = 12);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"cdp-lib\");\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(4);\nconst inquirer = __webpack_require__(2);\nconst cdp_lib_1 = __webpack_require__(0);\nconst fs = cdp_lib_1.Utils.fs;\nconst chalk = cdp_lib_1.Utils.chalk;\nconst _ = cdp_lib_1.Utils._;\n//___________________________________________________________________________________________________________________//\n/**\n * @class PromptBase\n * @brief Prompt のベースクラス\n */\nclass PromptBase {\n    constructor() {\n        this._answers = {};\n        this._locale = {};\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // public methods\n    /**\n     * エントリ\n     */\n    prompting(cmdInfo) {\n        this._cmdInfo = cmdInfo;\n        return new Promise((resolve, reject) => {\n            this.showPrologue();\n            this.inquireLanguage()\n                .then(() => {\n                return this.inquire();\n            })\n                .then((settings) => {\n                resolve(settings);\n            })\n                .catch((reason) => {\n                reject(reason);\n            });\n        });\n    }\n    /**\n     * Like cowsay\n     * https://en.wikipedia.org/wiki/Cowsay\n     */\n    say(message) {\n        const GREETING = \"\\n  ≡     \" + chalk.cyan(\"∧＿∧\") + \"    ／￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣\" +\n            \"\\n    ≡ \" + chalk.cyan(\"（ ´∀｀）\") + \"＜  \" + chalk.yellow(message) +\n            \"\\n  ≡   \" + chalk.cyan(\"（  つ\") + \"＝\" + chalk.cyan(\"つ\") + \"  ＼＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿\" +\n            \"\\n    ≡  \" + chalk.cyan(\"｜ ｜ |\") + \"＼\" +\n            \"\\n    ≡ \" + chalk.cyan(\"（_＿）＿）\") + \"＼\" +\n            \"\\n  ≡   \" + chalk.red(\"◎\") + \"￣￣￣￣\" + chalk.red(\"◎\");\n        console.log(GREETING);\n    }\n    /**\n     * ローカライズリソースにアクセス\n     * ex) this.lang.prompt.projectName.message\n     *\n     * @return {Object} リソースオブジェクト\n     */\n    get lang() {\n        return this._locale;\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // protected methods\n    /**\n     * 設定値にアクセス\n     *\n     * @return {Object} Answer オブジェクト\n     */\n    get answers() {\n        return this._answers;\n    }\n    /**\n     * Prologue コメントの設定\n     */\n    get prologueComment() {\n        return \"Welcome to CDP Boilerplate Generator!\";\n    }\n    /**\n     * Welcome 表示\n     */\n    showPrologue() {\n        console.log(\"\\n\" + chalk.gray(\"================================================================\"));\n        this.say(this.prologueComment);\n        console.log(\"\\n\" + chalk.gray(\"================================================================\") + \"\\n\");\n    }\n    /**\n     * Answer オブジェクト の更新\n     *\n     * @return {Object} Answer オブジェクト\n     */\n    updateAnswers(update) {\n        return _.merge(this._answers, update);\n    }\n    /**\n     * プロジェクト設定\n     * 分岐が必要な場合はオーバーライドすること\n     */\n    inquireSettings() {\n        return new Promise((resolve, reject) => {\n            inquirer.prompt(this.questions)\n                .then((answers) => {\n                resolve(answers);\n            })\n                .catch((reason) => {\n                reject(reason);\n            });\n        });\n    }\n    /**\n     * setting から 設定説明の作成\n     *\n     * @param  {Object} config 設定\n     * @param  {String} itemName 設定項目名\n     * @return {String} 説明文\n     */\n    config2description(config, itemName, color = \"cyan\") {\n        const item = this.lang.settings[itemName];\n        if (null == item) {\n            console.error(chalk.red(\"error. item not found. item name: \" + itemName));\n            process.exit(1);\n        }\n        const prop = (() => {\n            if (item.props) {\n                return item.props[config[itemName]];\n            }\n            else if (\"boolean\" === typeof config[itemName]) {\n                return item.bool[config[itemName] ? \"yes\" : \"no\"];\n            }\n            else {\n                return config[itemName];\n            }\n        })();\n        return item.label + chalk[color](prop);\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods\n    /**\n     * ローカライズリソースのロード\n     */\n    loadLanguage(locale) {\n        try {\n            this._locale = JSON.parse(fs.readFileSync(path.join(this._cmdInfo.pkgDir, \"res/locales/messages.\" + locale + \".json\"), \"utf8\").toString());\n        }\n        catch (error) {\n            throw Error(\"Language resource JSON parse error: \" + error.message);\n        }\n    }\n    /**\n     * 言語選択\n     */\n    inquireLanguage() {\n        return new Promise((resolve, reject) => {\n            const question = [\n                {\n                    type: \"list\",\n                    name: \"language\",\n                    message: \"Please choose your preferred language.\",\n                    choices: [\n                        {\n                            name: \"English/英語\",\n                            value: \"en-US\",\n                        },\n                        {\n                            name: \"Japanese/日本語\",\n                            value: \"ja-JP\",\n                        }\n                    ],\n                    default: 0,\n                }\n            ];\n            inquirer.prompt(question)\n                .then((answer) => {\n                this.loadLanguage(answer.language);\n                resolve();\n            })\n                .catch((reason) => {\n                reject(reason);\n            });\n        });\n    }\n    /**\n     * 設定確認\n     */\n    confirmSettings() {\n        return new Promise((resolve, reject) => {\n            console.log(\"\\n\" + chalk.gray(\"================================================================\") + \"\\n\");\n            const settings = this.displaySettingsByAnswers(this._answers);\n            console.log(\"\\n\" + chalk.gray(\"================================================================\") + \"\\n\");\n            console.log(\"check: \" + this.lang.prompt.common.confirm.message);\n            const question = [\n                {\n                    type: \"confirm\",\n                    name: \"confirmation\",\n                    message: this.lang.prompt.common.confirm.message,\n                    default: true,\n                }\n            ];\n            inquirer.prompt(question)\n                .then((answer) => {\n                if (answer.confirmation) {\n                    resolve(settings);\n                }\n                else {\n                    reject();\n                }\n            })\n                .catch((reason) => {\n                reject(reason);\n            });\n        });\n    }\n    /**\n     * command line 情報を Conficuration に反映\n     *\n     * @param  {IProjectConfiguration} config 設定\n     * @return {IProjectConfiguration} command line を反映させた config 設定\n     */\n    reflectCommandInfo(config) {\n        config.action = this._cmdInfo.action;\n        config.minify = this._cmdInfo.cliOptions.minify;\n        config.settings = {\n            force: this._cmdInfo.cliOptions.force,\n            verbose: this._cmdInfo.cliOptions.verbose,\n            silent: this._cmdInfo.cliOptions.silent,\n            targetDir: this._cmdInfo.cliOptions.targetDir,\n            lang: this.lang.type,\n        };\n        return config;\n    }\n    /**\n     * 設定インタラクション\n     */\n    inquire() {\n        return new Promise((resolve, reject) => {\n            const proc = () => {\n                this.inquireSettings()\n                    .then((answers) => {\n                    this.updateAnswers(answers);\n                    this.confirmSettings()\n                        .then((config) => {\n                        resolve(this.reflectCommandInfo(config));\n                    })\n                        .catch(() => {\n                        setTimeout(proc);\n                    });\n                })\n                    .catch((reason) => {\n                    reject(reason);\n                });\n            };\n            setTimeout(proc);\n        });\n    }\n}\nexports.PromptBase = PromptBase;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"inquirer\");\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * ブラウザ環境で動作するライブラリの既定値\n */\nconst libraryOnBrowser = {\n    // IProjectConfigration\n    projectType: \"library\",\n    // IBuildTargetConfigration\n    es: \"es5\",\n    module: \"umd\",\n    env: \"web\",\n    tools: [\"webpack\", \"nyc\"],\n};\n/**\n * Node.js 環境で動作するライブラリの既定値\n */\nconst libraryOnNode = {\n    // IProjectConfigration\n    projectType: \"library\",\n    // IBuildTargetConfigration\n    es: \"es2015\",\n    module: \"commonjs\",\n    env: \"node\",\n    tools: [\"webpack\", \"nyc\"],\n};\n/**\n * electron 環境で動作するライブラリの既定値\n */\nconst libraryOnElectron = {\n    // IProjectConfigration\n    projectType: \"library\",\n    // IBuildTargetConfigration\n    es: \"es2015\",\n    module: \"commonjs\",\n    env: \"electron\",\n    tools: [\"webpack\", \"nyc\"],\n};\n/**\n * ブラウザ(cordova)環境で動作するモバイルアプリケーションの既定値\n */\nconst mobileOnBrowser = {\n    // IProjectConfigration\n    projectType: \"mobile\",\n    // IBuildTargetConfigration\n    es: \"es5\",\n    module: \"amd\",\n    env: \"web\",\n    tools: [\"nyc\"],\n    // IMobileAppConfigration\n    platforms: [\"android\", \"ios\"],\n    projectStructure: [],\n    external: {\n        \"hogan.js\": {\n            acquisition: \"npm\",\n            regular: true,\n        },\n        \"hammerjs\": {\n            acquisition: \"npm\",\n            regular: true,\n            subset: {\n                \"jquery-hammerjs\": {\n                    acquisition: \"npm\",\n                    regular: true,\n                },\n                \"@types/hammerjs\": {\n                    acquisition: \"npm:dev\",\n                    regular: true,\n                },\n            },\n        },\n        \"cordova-plugin-cdp-nativebridge\": {\n            acquisition: \"cordova\",\n            regular: true,\n            subset: {\n                \"cdp-nativebridge\": {\n                    acquisition: \"resource\",\n                    regular: true,\n                },\n            },\n        },\n        \"cordova-plugin-inappbrowser\": {\n            acquisition: \"cordova\",\n            regular: false,\n            subset: {\n                \"@types/cordova-plugin-inappbrowser\": {\n                    acquisition: \"npm:dev\",\n                    default: true,\n                },\n            },\n        },\n        \"cordova-plugin-app-version\": {\n            acquisition: \"cordova\",\n            regular: false,\n            subset: {\n                \"@types/cordova-plugin-app-version\": {\n                    acquisition: \"npm:dev\",\n                    regular: true,\n                },\n            },\n        },\n        \"iscroll\": {\n            acquisition: \"npm\",\n            regular: false,\n            subset: {\n                \"@types/iscroll\": {\n                    acquisition: \"npm:dev\",\n                    regular: true,\n                },\n            },\n        },\n        \"flipsnap\": {\n            acquisition: \"npm\",\n            regular: false,\n            subset: {\n                \"@types/flipsnap\": {\n                    acquisition: \"npm:dev\",\n                    regular: true,\n                },\n            },\n        },\n    },\n};\n/**\n * ブラウザ環境で動作するデスクトップアプリケーションの既定値\n */\nconst desktopOnBrowser = {\n    // IProjectConfigration\n    projectType: \"desktop\",\n    // IBuildTargetConfigration\n    es: \"es5\",\n    module: \"amd\",\n    env: \"web\",\n    tools: [\"nyc\"],\n};\n/**\n *  electron 環境で動作するデスクトップアプリケーションの既定値\n */\nconst desktopOnElectron = {\n    // IProjectConfigration\n    projectType: \"desktop\",\n    // IBuildTargetConfigration\n    es: \"es2015\",\n    module: \"commonjs\",\n    env: \"electron-renderer\",\n    tools: [\"webpack\", \"nyc\"],\n};\n/**\n * ブラウザ環境で動作するウェブアプリケーションの既定値\n */\nconst webOnBrowser = {\n    // IProjectConfigration\n    projectType: \"web\",\n    // IBuildTargetConfigration\n    es: \"es5\",\n    module: \"amd\",\n    env: \"web\",\n};\n//___________________________________________________________________________________________________________________//\nexports.default = {\n    library: {\n        browser: libraryOnBrowser,\n        node: libraryOnNode,\n        electron: libraryOnElectron,\n        ELECTRON_AVAILABLE: false,\n    },\n    mobile: {\n        browser: mobileOnBrowser,\n    },\n    desctop: {\n        browser: desktopOnBrowser,\n        electron: desktopOnElectron,\n    },\n    web: {\n        browser: webOnBrowser,\n    },\n};\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"path\");\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cdp_lib_1 = __webpack_require__(0);\nconst command_parser_1 = __webpack_require__(6);\nconst prompt_library_1 = __webpack_require__(8);\nconst prompt_mobile_1 = __webpack_require__(9);\nconst prompt_desktop_1 = __webpack_require__(7);\nconst prompt_web_1 = __webpack_require__(10);\nconst chalk = cdp_lib_1.Utils.chalk;\nfunction getInquirer(cmdInfo) {\n    switch (cmdInfo.action) {\n        case \"create\":\n            break;\n        default:\n            console.error(chalk.red(cmdInfo.action + \" command: under construction.\"));\n            process.exit(1);\n    }\n    switch (cmdInfo.target) {\n        case \"library\":\n            return new prompt_library_1.PromptLibrary();\n        case \"mobile\":\n            return new prompt_mobile_1.PromptMobileApp();\n        case \"desktop\":\n            return new prompt_desktop_1.PromptDesktopApp();\n        case \"web\":\n            return new prompt_web_1.PromptWebApp();\n        default:\n            console.error(chalk.red(\"unsupported target: \" + cmdInfo.target));\n            process.exit(1);\n    }\n}\nfunction main() {\n    process.title = \"cdp\";\n    const cmdInfo = command_parser_1.CommandParser.parse(process.argv);\n    const inquirer = getInquirer(cmdInfo);\n    inquirer.prompting(cmdInfo)\n        .then((config) => {\n        // execute\n        return cdp_lib_1.default.execute(config);\n    })\n        .then(() => {\n        console.log(chalk.green(inquirer.lang.finished[cmdInfo.action]));\n    })\n        .catch((reason) => {\n        if (\"string\" !== typeof reason) {\n            if (null != reason.message) {\n                reason = reason.message;\n            }\n            else {\n                reason = JSON.stringify(reason);\n            }\n        }\n        console.error(chalk.red(reason));\n    })\n        .then(() => {\n        // NOTE: es6 promise's always block.\n    });\n}\nexports.main = main;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(4);\nconst commander = __webpack_require__(11);\nconst cdp_lib_1 = __webpack_require__(0);\nconst fs = cdp_lib_1.Utils.fs;\nconst chalk = cdp_lib_1.Utils.chalk;\n//___________________________________________________________________________________________________________________//\n/**\n * @class CommandParser\n * @brief コマンドラインパーサー\n */\nclass CommandParser {\n    ///////////////////////////////////////////////////////////////////////\n    // public static methods\n    /**\n     * コマンドラインのパース\n     *\n     * @param  {String} argv       引数を指定\n     * @param  {Object} [options]  オプションを指定\n     * @returns {ICommandLineInfo}\n     */\n    static parse(argv, options) {\n        const cmdline = {\n            pkgDir: this.getPackageDirectory(argv),\n        };\n        let pkg;\n        try {\n            pkg = JSON.parse(fs.readFileSync(path.join(cmdline.pkgDir, \"package.json\"), \"utf8\").toString());\n        }\n        catch (error) {\n            throw Error(\"package.json parse error: \" + error.message);\n        }\n        commander\n            .version(pkg.version)\n            .option(\"-f, --force\", \"Continue execution even if in error situation\")\n            .option(\"-t, --targetdir <path>\", \"Specify project target directory\")\n            .option(\"-c, --config <path>\", \"Specify config file path\")\n            .option(\"-v, --verbose\", \"Show debug messages.\")\n            .option(\"-s, --silent\", \"Run as silent mode.\")\n            .option(\"--no-minify\", \"Not minified on release.\");\n        commander\n            .command(\"init\")\n            .description(\"init project\")\n            .action(() => {\n            cmdline.action = \"init\";\n        })\n            .on(\"--help\", () => {\n            console.log(chalk.green(\"  Examples:\"));\n            console.log(\"\");\n            console.log(chalk.green(\"    $ cdp init\"));\n            console.log(\"\");\n        });\n        commander\n            .command(\"create <target>\")\n            .description(\"create boilerplate for 'library, module' | 'mobile, app' | 'desktop' | 'web'\")\n            .action((target) => {\n            if (/^(module|app|library|mobile|desktop|web)$/i.test(target)) {\n                cmdline.action = \"create\";\n                cmdline.target = target;\n                if (\"module\" === cmdline.target) {\n                    cmdline.target = \"library\";\n                }\n                else if (\"app\" === cmdline.target) {\n                    cmdline.target = \"mobile\";\n                }\n            }\n            else {\n                console.log(chalk.red.underline(\"  unsupported target: \" + target));\n                this.showHelp();\n            }\n        })\n            .on(\"--help\", () => {\n            console.log(chalk.green(\"  Examples:\"));\n            console.log(\"\");\n            console.log(chalk.green(\"    $ cdp create library\"));\n            console.log(chalk.green(\"    $ cdp create mobile\"));\n            console.log(chalk.green(\"    $ cdp create app -c setting.json\"));\n            console.log(\"\");\n        });\n        commander\n            .command(\"*\", null, { noHelp: true })\n            .action((cmd) => {\n            console.log(chalk.red.underline(\"  unsupported command: \" + cmd));\n            this.showHelp();\n        });\n        commander.parse(argv);\n        if (argv.length <= 2) {\n            this.showHelp();\n        }\n        cmdline.cliOptions = this.toCommandLineOptions(commander);\n        return cmdline;\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private static methods\n    /**\n     * CLI のインストールディレクトリを取得\n     *\n     * @param  {String[]} argv 引数\n     * @return {String} インストールディレクトリ\n     */\n    static getPackageDirectory(argv) {\n        const execDir = path.dirname(argv[1]);\n        return path.join(execDir, \"..\");\n    }\n    /**\n     * CLI option を ICommandLineOptions に変換\n     *\n     * @param  {Object} commander parse 済み comannder インスタンス\n     * @return {ICommandLineOptions} option オブジェクト\n     */\n    static toCommandLineOptions(commander) {\n        return {\n            force: !!commander.force,\n            targetDir: commander.targetdir,\n            config: commander.config,\n            verbose: !!commander.verbose,\n            silent: !!commander.silent,\n            minify: commander.minify,\n        };\n    }\n    /**\n     * ヘルプ表示して終了\n     */\n    static showHelp() {\n        const inform = (text) => {\n            return chalk.green(text);\n        };\n        commander.outputHelp(inform);\n        process.exit(1);\n    }\n}\nexports.CommandParser = CommandParser;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* tslint:disable:no-unused-variable no-unused-vars */\n/* eslint-disable no-unused-vars */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cdp_lib_1 = __webpack_require__(0);\nconst prompt_base_1 = __webpack_require__(1);\nconst chalk = cdp_lib_1.Utils.chalk;\n/**\n * @class PromptDesktopApp\n * @brief デスクトップアプリ用 Inquire クラス\n */\nclass PromptDesktopApp extends prompt_base_1.PromptBase {\n    ///////////////////////////////////////////////////////////////////////\n    // public methods\n    /**\n     * エントリ\n     */\n    prompting(cmdInfo) {\n        return new Promise((resolve, reject) => {\n            reject(\"desktop app prompting, under construction.\");\n        });\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // imprements abstruct methods\n    /**\n     * プロジェクト設定項目の取得\n     */\n    get questions() {\n        // TODO:\n        return [];\n    }\n    /**\n     * プロジェクト設定の確認\n     *\n     * @param  {IAnswerSchema} answers 回答結果\n     * @return {IProjectConfigration} 設定値を返却\n     */\n    displaySettingsByAnswers(answers) {\n        // TODO: show\n        return null;\n    }\n}\nexports.PromptDesktopApp = PromptDesktopApp;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst inquirer = __webpack_require__(2);\nconst cdp_lib_1 = __webpack_require__(0);\nconst prompt_base_1 = __webpack_require__(1);\nconst default_config_1 = __webpack_require__(3);\nconst $ = cdp_lib_1.Utils.$;\nconst chalk = cdp_lib_1.Utils.chalk;\nconst semverRegex = cdp_lib_1.Utils.semverRegex;\nconst libConfig = default_config_1.default.library;\n/**\n * @class PromptLibrary\n * @brief ライブラリモジュール用 Inquire クラス\n */\nclass PromptLibrary extends prompt_base_1.PromptBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprements abstruct methods\n    /**\n     * プロジェクト設定項目の取得\n     */\n    get questions() {\n        return [\n            // project common settnigs (IProjectConfigration)\n            {\n                type: \"input\",\n                name: \"projectName\",\n                message: this.lang.prompt.common.projectName.message,\n                default: this.answers.projectName || \"cool-project-name\",\n                validate: (value) => {\n                    if (!/^[a-zA-Z0-9_-]*$/.test(value)) {\n                        return this.lang.prompt.common.projectName.invalidMessage;\n                    }\n                    else {\n                        return true;\n                    }\n                },\n            },\n            {\n                type: \"input\",\n                name: \"version\",\n                message: this.lang.prompt.common.version.message,\n                default: this.answers.version || \"0.0.1\",\n                filter: (value) => {\n                    if (semverRegex().test(value)) {\n                        return semverRegex().exec(value)[0];\n                    }\n                    else {\n                        return value;\n                    }\n                },\n                validate: (value) => {\n                    if (semverRegex().test(value)) {\n                        return true;\n                    }\n                    else {\n                        return this.lang.prompt.common.version.invalidMessage;\n                    }\n                },\n            },\n            {\n                type: \"list\",\n                name: \"license\",\n                message: this.lang.prompt.common.license.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.license.choices.apache2,\n                        value: \"Apache-2.0\",\n                    },\n                    {\n                        name: this.lang.prompt.common.license.choices.mit,\n                        value: \"MIT\",\n                    },\n                    {\n                        name: this.lang.prompt.common.license.choices.proprietary,\n                        value: \"NONE\",\n                    }\n                ],\n                default: this.answers.license || \"NONE\",\n            },\n            // library settnigs (IBuildTargetConfigration)\n            {\n                type: \"list\",\n                name: \"env\",\n                message: this.lang.prompt.library.env.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.env.choices.browser,\n                        value: \"web\",\n                    },\n                    {\n                        name: this.lang.prompt.common.env.choices.node,\n                        value: \"node\",\n                    },\n                    new inquirer.Separator(),\n                    {\n                        name: this.lang.prompt.common.env.choices.electron + this.LIMITATION(),\n                        value: \"electron\",\n                    },\n                    {\n                        name: this.lang.prompt.common.env.choices.electronRenderer + this.LIMITATION(),\n                        value: \"electron-renderer\",\n                    }\n                ],\n                filter: (value) => {\n                    if (libConfig.ELECTRON_AVAILABLE) {\n                        return value;\n                    }\n                    else if (\"electron\" === value) {\n                        return \"node\";\n                    }\n                    else if (\"electron-renderer\" === value) {\n                        return \"web\";\n                    }\n                    else {\n                        return value;\n                    }\n                },\n                default: this.answers.env || \"web\",\n            },\n            // base structure\n            {\n                type: \"list\",\n                name: \"extraSettings\",\n                message: this.lang.prompt.common.extraSettings.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.extraSettings.choices.recommended,\n                        value: \"recommended\",\n                    },\n                    {\n                        name: this.lang.prompt.common.extraSettings.choices.custom,\n                        value: \"custom\",\n                    },\n                ],\n                default: this.answers.extraSettings || \"recommended\",\n            },\n            // library settnigs (custom: module)\n            {\n                type: \"list\",\n                name: \"module\",\n                message: this.lang.prompt.common.module.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.module.choices.none,\n                        value: \"none\",\n                    },\n                    {\n                        name: this.lang.prompt.common.module.choices.commonjs,\n                        value: \"commonjs\",\n                    },\n                    {\n                        name: this.lang.prompt.common.module.choices.umd,\n                        value: \"umd\",\n                    },\n                ],\n                default: (\"amd\" !== this.answers.module) ? (this.answers.module || \"commonjs\") : \"commonjs\",\n                when: (answers) => {\n                    return \"custom\" === answers.extraSettings && /^(node|electron)$/i.test(answers.env);\n                },\n            },\n            {\n                type: \"list\",\n                name: \"module\",\n                message: this.lang.prompt.common.module.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.module.choices.none,\n                        value: \"none\",\n                    },\n                    {\n                        name: this.lang.prompt.common.module.choices.amd,\n                        value: \"amd\",\n                    },\n                    {\n                        name: this.lang.prompt.common.module.choices.umd,\n                        value: \"umd\",\n                    },\n                ],\n                default: (\"commonjs\" !== this.answers.module) ? (this.answers.module || \"amd\") : \"amd\",\n                when: (answers) => {\n                    return \"custom\" === answers.extraSettings && \"web\" === answers.env;\n                },\n            },\n            {\n                type: \"list\",\n                name: \"module\",\n                message: this.lang.prompt.common.module.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.module.choices.none,\n                        value: \"none\",\n                    },\n                    {\n                        name: this.lang.prompt.common.module.choices.commonjs,\n                        value: \"commonjs\",\n                    },\n                    {\n                        name: this.lang.prompt.common.module.choices.amd,\n                        value: \"amd\",\n                    },\n                    {\n                        name: this.lang.prompt.common.module.choices.umd,\n                        value: \"umd\",\n                    },\n                ],\n                default: this.answers.module || \"commonjs\",\n                when: (answers) => {\n                    return \"custom\" === answers.extraSettings && \"electron-renderer\" === answers.env;\n                },\n            },\n            // library settnigs (custom: es)\n            {\n                type: \"list\",\n                name: \"es\",\n                message: this.lang.prompt.common.es.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.es.choices.es5,\n                        value: \"es5\",\n                    },\n                    {\n                        name: this.lang.prompt.common.es.choices.es2015,\n                        value: \"es2015\",\n                    },\n                ],\n                default: this.answers.es || (\"web\" === this.answers.env ? \"es5\" : \"es2015\"),\n                when: (answers) => {\n                    return \"custom\" === answers.extraSettings;\n                },\n            },\n        ];\n    }\n    /**\n     * プロジェクト設定の確認\n     *\n     * @param  {IAnswerSchema} answers 回答結果\n     * @return {IProjectConfigration} 設定値を返却\n     */\n    displaySettingsByAnswers(answers) {\n        const config = (() => {\n            switch (answers.env) {\n                case \"web\":\n                    return $.extend({}, libConfig.browser, answers);\n                case \"node\":\n                    return $.extend({}, libConfig.node, answers);\n                case \"electron\":\n                    return $.extend({}, libConfig.electron, answers);\n                case \"electron-renderer\":\n                    return $.extend({}, libConfig.electron, answers);\n                default:\n                    console.error(chalk.red(\"unsupported target: \" + answers.env));\n                    process.exit(1);\n            }\n        })();\n        const items = [\n            { name: \"extraSettings\", recommend: false },\n            { name: \"projectName\", recommend: false },\n            { name: \"version\", recommend: false },\n            { name: \"license\", recommend: false },\n            { name: \"env\", recommend: false },\n            { name: \"module\", recommend: true },\n            { name: \"es\", recommend: true },\n        ];\n        try {\n            items.forEach((item) => {\n                const color = (item.recommend && \"recommended\" === answers.extraSettings) ? \"yellow\" : undefined;\n                console.log(this.config2description(config, item.name, color));\n            });\n        }\n        catch (error) {\n            console.error(chalk.red(\"error: \" + JSON.stringify(error, null, 4)));\n            process.exit(1);\n        }\n        return config;\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * electron が有効出ない場合の補足文字を取得\n     */\n    LIMITATION() {\n        return libConfig.ELECTRON_AVAILABLE ? \"\" : \" \" + this.lang.prompt.common.stilNotAvailable;\n    }\n}\nexports.PromptLibrary = PromptLibrary;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst inquirer = __webpack_require__(2);\nconst cdp_lib_1 = __webpack_require__(0);\nconst prompt_base_1 = __webpack_require__(1);\nconst default_config_1 = __webpack_require__(3);\nconst $ = cdp_lib_1.Utils.$;\nconst _ = cdp_lib_1.Utils._;\nconst chalk = cdp_lib_1.Utils.chalk;\nconst semverRegex = cdp_lib_1.Utils.semverRegex;\nconst mobileConfig = default_config_1.default.mobile;\nconst EXTERNAL_DEFAULTS = (() => {\n    const defaults = [];\n    Object.keys(mobileConfig.browser.external)\n        .forEach((target) => {\n        if (mobileConfig.browser.external[target].regular) {\n            defaults.push(target);\n        }\n    });\n    return defaults;\n})();\n/**\n * @class PromptMobileApp\n * @brief モバイルアプリ用 Inquire クラス\n */\nclass PromptMobileApp extends prompt_base_1.PromptBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprements abstruct methods\n    /**\n     * プロジェクト設定項目の取得\n     */\n    get questions() {\n        const platforms_default = this.answers.platforms\n            ? this.answers.platforms.slice()\n            : mobileConfig.browser.platforms;\n        delete this.answers.platforms;\n        const projectStructure_default = this.answers.projectStructure\n            ? this.answers.projectStructure.slice()\n            : mobileConfig.browser.projectStructure;\n        delete this.answers.projectStructure;\n        const external_default = this.answers.external\n            ? this.answers.external.slice()\n            : EXTERNAL_DEFAULTS;\n        delete this.answers.external;\n        return [\n            // project common settnigs (IProjectConfigration)\n            {\n                type: \"input\",\n                name: \"appName\",\n                message: this.lang.prompt.mobile.appName.message,\n                default: this.answers.appName || \"Cool App Name\",\n                validate: (value) => {\n                    if (/^.*[(\\\\|/|:|*|?|\"|<|>||)].*$/.test(value)) {\n                        return this.lang.prompt.mobile.appName.invalidMessage;\n                    }\n                    else {\n                        return true;\n                    }\n                },\n            },\n            {\n                type: \"input\",\n                name: \"projectName\",\n                message: this.lang.prompt.common.projectName.message,\n                default: (answers) => {\n                    return _.trim(_.dasherize(answers.appName), \"-\");\n                },\n                validate: (value) => {\n                    if (!/^[a-zA-Z0-9_-]*$/.test(value)) {\n                        return this.lang.prompt.common.projectName.invalidMessage;\n                    }\n                    else {\n                        return true;\n                    }\n                },\n            },\n            {\n                type: \"input\",\n                name: \"appId\",\n                message: this.lang.prompt.mobile.appId.message,\n                default: this.answers.appId || \"org.cool.appname\",\n                filter: (value) => {\n                    return value.toLowerCase();\n                },\n            },\n            {\n                type: \"input\",\n                name: \"version\",\n                message: this.lang.prompt.common.version.message,\n                default: this.answers.version || \"0.0.1\",\n                filter: (value) => {\n                    if (semverRegex().test(value)) {\n                        return semverRegex().exec(value)[0];\n                    }\n                    else {\n                        return value;\n                    }\n                },\n                validate: (value) => {\n                    if (semverRegex().test(value)) {\n                        return true;\n                    }\n                    else {\n                        return this.lang.prompt.common.version.invalidMessage;\n                    }\n                },\n            },\n            {\n                type: \"list\",\n                name: \"license\",\n                message: this.lang.prompt.common.license.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.license.choices.apache2,\n                        value: \"Apache-2.0\",\n                    },\n                    {\n                        name: this.lang.prompt.common.license.choices.mit,\n                        value: \"MIT\",\n                    },\n                    {\n                        name: this.lang.prompt.common.license.choices.proprietary,\n                        value: \"NONE\",\n                    },\n                ],\n                default: this.answers.license || \"NONE\",\n            },\n            {\n                type: \"checkbox\",\n                name: \"platforms\",\n                message: this.lang.prompt.mobile.platforms.message,\n                choices: [\n                    {\n                        name: \"android\",\n                        checked: (0 <= platforms_default.indexOf(\"android\")),\n                    },\n                    {\n                        name: \"ios\",\n                        checked: (0 <= platforms_default.indexOf(\"ios\")),\n                    },\n                ],\n            },\n            {\n                type: \"list\",\n                name: \"extraSettings\",\n                message: this.lang.prompt.common.extraSettings.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.extraSettings.choices.recommended,\n                        value: \"recommended\",\n                    },\n                    {\n                        name: this.lang.prompt.common.extraSettings.choices.custom,\n                        value: \"custom\",\n                    },\n                ],\n                default: this.answers.extraSettings || \"recommended\",\n            },\n            {\n                type: \"checkbox\",\n                name: \"projectStructure\",\n                message: this.lang.prompt.mobile.projectStructure.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.mobile.projectStructure.lib,\n                        value: \"lib\",\n                        checked: (0 <= projectStructure_default.indexOf(\"lib\")),\n                    },\n                    {\n                        name: this.lang.prompt.mobile.projectStructure.porting,\n                        value: \"porting\",\n                        checked: (0 <= projectStructure_default.indexOf(\"porting\")),\n                    },\n                ],\n                when: (answers) => {\n                    return \"custom\" === answers.extraSettings;\n                },\n            },\n            {\n                type: \"checkbox\",\n                name: \"external\",\n                message: this.lang.prompt.mobile.external.message,\n                paginated: false,\n                choices: [\n                    new inquirer.Separator(this.lang.prompt.mobile.external.separator.cordova),\n                    {\n                        name: this.lang.prompt.mobile.external.modules[\"cordova-plugin-cdp-nativebridge\"],\n                        value: \"cordova-plugin-cdp-nativebridge\",\n                        checked: (0 <= external_default.indexOf(\"cordova-plugin-cdp-nativebridge\")),\n                        disabled: (answers) => {\n                            if (!answers.platforms || answers.platforms.length <= 0) {\n                                return this.lang.prompt.mobile.external.noCordovaMessage;\n                            }\n                        },\n                    },\n                    {\n                        name: this.lang.prompt.mobile.external.modules[\"cordova-plugin-inappbrowser\"],\n                        value: \"cordova-plugin-inappbrowser\",\n                        checked: (0 <= external_default.indexOf(\"cordova-plugin-inappbrowser\")),\n                        disabled: (answers) => {\n                            if (!answers.platforms || answers.platforms.length <= 0) {\n                                return this.lang.prompt.mobile.external.noCordovaMessage;\n                            }\n                        },\n                    },\n                    {\n                        name: this.lang.prompt.mobile.external.modules[\"cordova-plugin-app-version\"],\n                        value: \"cordova-plugin-app-version\",\n                        checked: (0 <= external_default.indexOf(\"cordova-plugin-app-version\")),\n                        disabled: (answers) => {\n                            if (!answers.platforms || answers.platforms.length <= 0) {\n                                return this.lang.prompt.mobile.external.noCordovaMessage;\n                            }\n                        },\n                    },\n                    new inquirer.Separator(this.lang.prompt.mobile.external.separator.utils),\n                    /* tslint:disable:no-string-literal */\n                    {\n                        name: this.lang.prompt.mobile.external.modules[\"hogan.js\"],\n                        value: \"hogan.js\",\n                        checked: (0 <= external_default.indexOf(\"hogan.js\")),\n                    },\n                    {\n                        name: this.lang.prompt.mobile.external.modules[\"hammerjs\"],\n                        value: \"hammerjs\",\n                        checked: (0 <= external_default.indexOf(\"hammerjs\")),\n                    },\n                    {\n                        name: this.lang.prompt.mobile.external.modules[\"iscroll\"],\n                        value: \"iscroll\",\n                        checked: (0 <= external_default.indexOf(\"iscroll\")),\n                    },\n                    {\n                        name: this.lang.prompt.mobile.external.modules[\"flipsnap\"],\n                        value: \"flipsnap\",\n                        checked: (0 <= external_default.indexOf(\"flipsnap\")),\n                    },\n                ],\n                when: (answers) => {\n                    return \"custom\" === answers.extraSettings;\n                },\n            },\n        ];\n    }\n    /**\n     * プロジェクト設定の確認\n     *\n     * @param  {IAnswerSchema} answers 回答結果\n     * @return {IProjectConfigration} 設定値を返却\n     */\n    displaySettingsByAnswers(answers) {\n        const config = (() => {\n            const defaults = $.extend({}, mobileConfig.browser);\n            const lookup = defaults.external;\n            delete defaults.external;\n            const _config = $.extend({}, defaults, {\n                external: EXTERNAL_DEFAULTS,\n                dependencies: [],\n                devDependencies: [],\n                cordova_plugin: [],\n                resource_addon: [],\n            }, answers);\n            try {\n                const resolveDependencies = (moduleName, info) => {\n                    switch (info.acquisition) {\n                        case \"npm\":\n                            _config.dependencies.push({ name: moduleName });\n                            return true;\n                        case \"npm:dev\":\n                            _config.devDependencies.push({ name: moduleName });\n                            return true;\n                        case \"cordova\":\n                            if (0 < _config.platforms.length) {\n                                _config.cordova_plugin.push({ name: moduleName });\n                                return true;\n                            }\n                            else {\n                                return false;\n                            }\n                        case \"resource\":\n                            _config.resource_addon.push({ name: moduleName });\n                            return true;\n                        default:\n                            return false;\n                    }\n                };\n                _config.external.forEach((top) => {\n                    const info = lookup[top];\n                    const valid = resolveDependencies(top, info);\n                    if (valid && info.subset) {\n                        Object.keys(info.subset)\n                            .forEach((sub) => {\n                            resolveDependencies(sub, info.subset[sub]);\n                        });\n                    }\n                });\n            }\n            catch (error) {\n                console.error(chalk.red(\"error: \" + JSON.stringify(error, null, 4)));\n                process.exit(1);\n            }\n            delete _config.external;\n            return _config;\n        })();\n        const items = [\n            { name: \"extraSettings\", fixed: false },\n            { name: \"appName\", fixed: false },\n            { name: \"projectName\", fixed: false },\n            { name: \"appId\", fixed: false },\n            { name: \"version\", fixed: false },\n            { name: \"license\", fixed: false },\n            { name: \"module\", fixed: true },\n            { name: \"es\", fixed: true },\n        ];\n        try {\n            items.forEach((item) => {\n                const color = (item.fixed) ? \"yellow\" : undefined;\n                console.log(this.config2description(config, item.name, color));\n            });\n        }\n        catch (error) {\n            console.error(chalk.red(\"error: \" + JSON.stringify(error, null, 4)));\n            process.exit(1);\n        }\n        // platforms\n        const platformInfo = (0 < config.platforms.length)\n            ? config.platforms.join(\", \")\n            : this.lang.settings.mobile.platforms.none;\n        console.log(\"\\n\" + this.lang.settings.mobile.platforms.label + chalk.cyan(platformInfo));\n        const COLOR = (\"recommended\" === answers.extraSettings) ? \"yellow\" : \"cyan\";\n        // additional project structure\n        if (0 < config.projectStructure.length) {\n            const projectStructure = config.projectStructure.join(\", \");\n            console.log(\"\\n\" + this.lang.settings.mobile.projectStructure.label + chalk[COLOR](projectStructure));\n        }\n        // additional cordova plugin\n        if (0 < config.cordova_plugin.length) {\n            console.log(\"\\n\" + this.lang.settings.mobile.cordovaPlugins.label);\n            config.cordova_plugin.forEach((info) => {\n                console.log(\"    \" + chalk[COLOR](info.name));\n            });\n        }\n        // additional dependency\n        if (0 < config.dependencies.length) {\n            console.log(\"\\n\" + this.lang.settings.mobile.dependencies.label);\n            config.resource_addon.forEach((info) => {\n                console.log(\"    \" + chalk[COLOR](info.name));\n            });\n            config.dependencies.forEach((info) => {\n                console.log(\"    \" + chalk[COLOR](info.name));\n            });\n        }\n        return config;\n    }\n}\nexports.PromptMobileApp = PromptMobileApp;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* tslint:disable:no-unused-variable no-unused-vars */\n/* eslint-disable no-unused-vars */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cdp_lib_1 = __webpack_require__(0);\nconst prompt_base_1 = __webpack_require__(1);\nconst chalk = cdp_lib_1.Utils.chalk;\n/**\n * @class PromptWebApp\n * @brief ウェブアプリ用 Inquire クラス\n */\nclass PromptWebApp extends prompt_base_1.PromptBase {\n    ///////////////////////////////////////////////////////////////////////\n    // public methods\n    /**\n     * エントリ\n     */\n    prompting(cmdInfo) {\n        return new Promise((resolve, reject) => {\n            reject(\"web app prompting, under construction.\");\n        });\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // imprements abstruct methods\n    /**\n     * プロジェクト設定項目の取得\n     */\n    get questions() {\n        // TODO:\n        return [];\n    }\n    /**\n     * プロジェクト設定の確認\n     *\n     * @param  {IAnswerSchema} answers 回答結果\n     * @return {IProjectConfigration} 設定値を返却\n     */\n    displaySettingsByAnswers(answers) {\n        // TODO: show\n        return null;\n    }\n}\nexports.PromptWebApp = PromptWebApp;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"commander\");\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(5);\n\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}