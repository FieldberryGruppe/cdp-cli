{"version":3,"sources":["dist/cdp-cli.js"],"names":["module","exports","modules","installedModules","__webpack_require__","moduleId","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","require","value","path","inquirer","cdp_lib_1","fs","Utils","chalk","_","PromptBase","[object Object]","this","_answers","_locale","cmdInfo","_cmdInfo","Promise","resolve","reject","showPrologue","inquireLanguage","then","inquire","settings","catch","reason","message","GREETING","yellow","cyan","red","console","log","lang","answers","prologueComment","gray","say","update","merge","prompt","questions","config","itemName","color","item","error","process","exit","prop","props","bool","label","locale","JSON","parse","readFileSync","join","pkgDir","toString","Error","question","type","choices","default","answer","loadLanguage","language","displaySettingsByAnswers","common","confirm","confirmation","action","minify","cliOptions","force","verbose","silent","targetDir","proc","inquireSettings","updateAnswers","confirmSettings","reflectCommandInfo","setTimeout","libraryOnBrowser","projectType","es","env","tools","libraryOnNode","libraryOnElectron","mobileOnBrowser","platforms","projectStructure","external","hogan.js","acquisition","regular","alias","hammerjs","globalExport","fileName","subset","jquery-hammerjs","venderName","@types/hammerjs","cordova-plugin-cdp-nativebridge","cordova-plugin-inappbrowser","@types/cordova-plugin-inappbrowser","cordova-plugin-app-version","@types/cordova-plugin-app-version","iscroll","@types/iscroll","flipsnap","@types/flipsnap","desktopOnBrowser","desktopOnElectron","webOnBrowser","library","browser","node","electron","ELECTRON_AVAILABLE","mobile","desctop","web","__export","index_1","_settings","getSettings","deepExtend","setSettings","optionalParams","length","debug","assert","test","warn","os","child_process_1","cli_spinner_1","which","settings_1","handleError","getSpinner","format","index","spinners","fmt","spinner","Spinner","idx","Math","floor","random","setSpinnerString","execCommand","command","args","options","opt","stdio","stdout","data","stderr","quoteIfNeeded","str","platform","includes","shell","resolvedCommand","stringify","start","map","child","spawn","on","code","stop","command_parser_1","prompt_library_1","prompt_mobile_1","prompt_desktop_1","prompt_web_1","cdp_doc_1","getCreateInquirer","target","PromptLibrary","PromptMobileApp","PromptDesktopApp","PromptWebApp","inquireCreate","prompting","execute","green","finished","browseDoc","prt","main","title","CommandParser","argv","port","commander","cmdline","getPackageDirectory","pkg","version","option","description","underline","showHelp","noHelp","cmd","toCommandLineOptions","execRealPath","realpathSync","execDir","dirname","targetdir","inform","text","outputHelp","prompt_base_1","default_config_1","$","semverRegex","libConfig","projectName","validate","invalidMessage","filter","exec","license","apache2","mit","proprietary","Separator","LIMITATION","electronRenderer","extraSettings","recommended","custom","none","commonjs","umd","when","amd","es5","es2015","extend","items","recommend","forEach","undefined","config2description","stilNotAvailable","mobileConfig","EXTERNAL_DEFAULTS","defaults","keys","push","platforms_default","slice","projectStructure_default","external_default","appName","trim","dasherize","toLowerCase","appId","checked","indexOf","lib","porting","paginated","separator","cordova","disabled","noCordovaMessage","utils","lookup","_config","dependencies","devDependencies","cordova_plugin","resource_addon","resolveDependencies","moduleName","info","top","valid","sub","fixed","platformInfo","COLOR","cordovaPlugins","CDPDoc","launchLocalServer","launchBrowser","opn","express","http","url","hostName","DEFAULT_PORT","prtNumber","Number","parseInt","String","hostUrl","href","app","htmlRoot","__dirname","use","static","server","createServer","e","error_json_string","error_js_object","errno","listen"],"mappings":"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","sourcesContent":["﻿/*!\n * cdp-cli.js 0.1.6-dev\n *\n * Date: 2018-02-23T11:55:14.682Z\n */\n\nmodule.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/     // The module cache\n/******/     var installedModules = {};\n/******/\n/******/     // The require function\n/******/     function __webpack_require__(moduleId) {\n/******/\n/******/         // Check if module is in cache\n/******/         if(installedModules[moduleId]) {\n/******/             return installedModules[moduleId].exports;\n/******/         }\n/******/         // Create a new module (and put it into the cache)\n/******/         var module = installedModules[moduleId] = {\n/******/             i: moduleId,\n/******/             l: false,\n/******/             exports: {}\n/******/         };\n/******/\n/******/         // Execute the module function\n/******/         modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/         // Flag the module as loaded\n/******/         module.l = true;\n/******/\n/******/         // Return the exports of the module\n/******/         return module.exports;\n/******/     }\n/******/\n/******/\n/******/     // expose the modules object (__webpack_modules__)\n/******/     __webpack_require__.m = modules;\n/******/\n/******/     // expose the module cache\n/******/     __webpack_require__.c = installedModules;\n/******/\n/******/     // define getter function for harmony exports\n/******/     __webpack_require__.d = function(exports, name, getter) {\n/******/         if(!__webpack_require__.o(exports, name)) {\n/******/             Object.defineProperty(exports, name, {\n/******/                 configurable: false,\n/******/                 enumerable: true,\n/******/                 get: getter\n/******/             });\n/******/         }\n/******/     };\n/******/\n/******/     // getDefaultExport function for compatibility with non-harmony modules\n/******/     __webpack_require__.n = function(module) {\n/******/         var getter = module && module.__esModule ?\n/******/             function getDefault() { return module['default']; } :\n/******/             function getModuleExports() { return module; };\n/******/         __webpack_require__.d(getter, 'a', getter);\n/******/         return getter;\n/******/     };\n/******/\n/******/     // Object.prototype.hasOwnProperty.call\n/******/     __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/     // __webpack_public_path__\n/******/     __webpack_require__.p = \"\";\n/******/\n/******/     // Load entry module and return exports\n/******/     return __webpack_require__(__webpack_require__.s = 8);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"cdp-lib\");\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(2);\nconst inquirer = __webpack_require__(3);\nconst cdp_lib_1 = __webpack_require__(0);\nconst fs = cdp_lib_1.Utils.fs;\nconst chalk = cdp_lib_1.Utils.chalk;\nconst _ = cdp_lib_1.Utils._;\n//___________________________________________________________________________________________________________________//\n/**\n * @class PromptBase\n * @brief Prompt のベースクラス\n */\nclass PromptBase {\n    constructor() {\n        this._answers = {};\n        this._locale = {};\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // public methods\n    /**\n     * エントリ\n     */\n    prompting(cmdInfo) {\n        this._cmdInfo = cmdInfo;\n        return new Promise((resolve, reject) => {\n            this.showPrologue();\n            this.inquireLanguage()\n                .then(() => {\n                return this.inquire();\n            })\n                .then((settings) => {\n                resolve(settings);\n            })\n                .catch((reason) => {\n                reject(reason);\n            });\n        });\n    }\n    /**\n     * Like cowsay\n     * https://en.wikipedia.org/wiki/Cowsay\n     */\n    say(message) {\n        const GREETING = \"\\n    ≡   \" + chalk.yellow(\"|￣ |\") +\n            \"\\n  ≡    \" + chalk.yellow(\"_|___ |_\") + \"   ／￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣\" +\n            \"\\n    ≡ \" + chalk.cyan(\"（ -^0^ ）\") + \"＜  \" + chalk.yellow(message) +\n            \"\\n  ≡   \" + chalk.cyan(\"（  つ\") + \"＝\" + chalk.cyan(\"つ\") + \"  ＼＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿\" +\n            \"\\n    ≡  \" + chalk.cyan(\"｜ ｜ |\") + \"＼\" +\n            \"\\n    ≡ \" + chalk.cyan(\"（_＿）＿）\") + \"＼\" +\n            \"\\n  ≡   \" + chalk.red(\"◎\") + \"￣￣￣￣\" + chalk.red(\"◎\");\n        console.log(GREETING);\n    }\n    /**\n     * ローカライズリソースにアクセス\n     * ex) this.lang.prompt.projectName.message\n     *\n     * @return {Object} リソースオブジェクト\n     */\n    get lang() {\n        return this._locale;\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // protected methods\n    /**\n     * 設定値にアクセス\n     *\n     * @return {Object} Answer オブジェクト\n     */\n    get answers() {\n        return this._answers;\n    }\n    /**\n     * Prologue コメントの設定\n     */\n    get prologueComment() {\n        return \"Welcome to CDP Boilerplate Generator!\";\n    }\n    /**\n     * Welcome 表示\n     */\n    showPrologue() {\n        console.log(\"\\n\" + chalk.gray(\"================================================================\"));\n        this.say(this.prologueComment);\n        console.log(\"\\n\" + chalk.gray(\"================================================================\") + \"\\n\");\n    }\n    /**\n     * Answer オブジェクト の更新\n     *\n     * @return {Object} Answer オブジェクト\n     */\n    updateAnswers(update) {\n        return _.merge(this._answers, update);\n    }\n    /**\n     * プロジェクト設定\n     * 分岐が必要な場合はオーバーライドすること\n     */\n    inquireSettings() {\n        return new Promise((resolve, reject) => {\n            inquirer.prompt(this.questions)\n                .then((answers) => {\n                resolve(answers);\n            })\n                .catch((reason) => {\n                reject(reason);\n            });\n        });\n    }\n    /**\n     * setting から 設定説明の作成\n     *\n     * @param  {Object} config 設定\n     * @param  {String} itemName 設定項目名\n     * @return {String} 説明文\n     */\n    config2description(config, itemName, color = \"cyan\") {\n        const item = this.lang.settings[itemName];\n        if (null == item) {\n            console.error(chalk.red(\"error. item not found. item name: \" + itemName));\n            process.exit(1);\n        }\n        const prop = (() => {\n            if (item.props) {\n                return item.props[config[itemName]];\n            }\n            else if (\"boolean\" === typeof config[itemName]) {\n                return item.bool[config[itemName] ? \"yes\" : \"no\"];\n            }\n            else {\n                return config[itemName];\n            }\n        })();\n        return item.label + chalk[color](prop);\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods\n    /**\n     * ローカライズリソースのロード\n     */\n    loadLanguage(locale) {\n        try {\n            this._locale = JSON.parse(fs.readFileSync(path.join(this._cmdInfo.pkgDir, \"res/locales/messages.\" + locale + \".json\"), \"utf8\").toString());\n        }\n        catch (error) {\n            throw Error(\"Language resource JSON parse error: \" + error.message);\n        }\n    }\n    /**\n     * 言語選択\n     */\n    inquireLanguage() {\n        return new Promise((resolve, reject) => {\n            const question = [\n                {\n                    type: \"list\",\n                    name: \"language\",\n                    message: \"Please choose your preferred language.\",\n                    choices: [\n                        {\n                            name: \"English/英語\",\n                            value: \"en-US\",\n                        },\n                        {\n                            name: \"Japanese/日本語\",\n                            value: \"ja-JP\",\n                        }\n                    ],\n                    default: 0,\n                }\n            ];\n            inquirer.prompt(question)\n                .then((answer) => {\n                this.loadLanguage(answer.language);\n                resolve();\n            })\n                .catch((reason) => {\n                reject(reason);\n            });\n        });\n    }\n    /**\n     * 設定確認\n     */\n    confirmSettings() {\n        return new Promise((resolve, reject) => {\n            console.log(\"\\n\" + chalk.gray(\"================================================================\") + \"\\n\");\n            const settings = this.displaySettingsByAnswers(this._answers);\n            console.log(\"\\n\" + chalk.gray(\"================================================================\") + \"\\n\");\n            console.log(\"check: \" + this.lang.prompt.common.confirm.message);\n            const question = [\n                {\n                    type: \"confirm\",\n                    name: \"confirmation\",\n                    message: this.lang.prompt.common.confirm.message,\n                    default: true,\n                }\n            ];\n            inquirer.prompt(question)\n                .then((answer) => {\n                if (answer.confirmation) {\n                    resolve(settings);\n                }\n                else {\n                    reject();\n                }\n            })\n                .catch((reason) => {\n                reject(reason);\n            });\n        });\n    }\n    /**\n     * command line 情報を Conficuration に反映\n     *\n     * @param  {IProjectConfiguration} config 設定\n     * @return {IProjectConfiguration} command line を反映させた config 設定\n     */\n    reflectCommandInfo(config) {\n        config.action = this._cmdInfo.action;\n        config.minify = this._cmdInfo.cliOptions.minify;\n        config.settings = {\n            force: this._cmdInfo.cliOptions.force,\n            verbose: this._cmdInfo.cliOptions.verbose,\n            silent: this._cmdInfo.cliOptions.silent,\n            targetDir: this._cmdInfo.cliOptions.targetDir,\n            lang: this.lang.type,\n        };\n        return config;\n    }\n    /**\n     * 設定インタラクション\n     */\n    inquire() {\n        return new Promise((resolve, reject) => {\n            const proc = () => {\n                this.inquireSettings()\n                    .then((answers) => {\n                    this.updateAnswers(answers);\n                    this.confirmSettings()\n                        .then((config) => {\n                        resolve(this.reflectCommandInfo(config));\n                    })\n                        .catch(() => {\n                        setTimeout(proc);\n                    });\n                })\n                    .catch((reason) => {\n                    reject(reason);\n                });\n            };\n            setTimeout(proc);\n        });\n    }\n}\nexports.PromptBase = PromptBase;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"path\");\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"inquirer\");\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * ブラウザ環境で動作するライブラリの既定値\n */\nconst libraryOnBrowser = {\n    // IProjectConfigration\n    projectType: \"library\",\n    // IBuildTargetConfigration\n    es: \"es5\",\n    module: \"umd\",\n    env: \"web\",\n    tools: [\"webpack\", \"nyc\"],\n};\n/**\n * Node.js 環境で動作するライブラリの既定値\n */\nconst libraryOnNode = {\n    // IProjectConfigration\n    projectType: \"library\",\n    // IBuildTargetConfigration\n    es: \"es2015\",\n    module: \"commonjs\",\n    env: \"node\",\n    tools: [\"webpack\", \"nyc\"],\n};\n/**\n * electron 環境で動作するライブラリの既定値\n */\nconst libraryOnElectron = {\n    // IProjectConfigration\n    projectType: \"library\",\n    // IBuildTargetConfigration\n    es: \"es2015\",\n    module: \"commonjs\",\n    env: \"electron\",\n    tools: [\"webpack\", \"nyc\"],\n};\n/**\n * ブラウザ(cordova)環境で動作するモバイルアプリケーションの既定値\n */\nconst mobileOnBrowser = {\n    // IProjectConfigration\n    projectType: \"mobile\",\n    // IBuildTargetConfigration\n    es: \"es5\",\n    module: \"amd\",\n    env: \"web\",\n    tools: [\"nyc\"],\n    // IMobileAppConfigration\n    platforms: [\"android\", \"ios\"],\n    projectStructure: [],\n    external: {\n        \"hogan.js\": {\n            acquisition: \"npm\",\n            regular: true,\n            alias: \"hogan\",\n        },\n        \"hammerjs\": {\n            acquisition: \"npm\",\n            regular: true,\n            globalExport: \"Hammer\",\n            fileName: \"hammer\",\n            subset: {\n                \"jquery-hammerjs\": {\n                    acquisition: \"npm\",\n                    venderName: \"hammerjs\",\n                    fileName: \"jquery.hammer\",\n                    regular: true,\n                },\n                \"@types/hammerjs\": {\n                    acquisition: \"npm:dev\",\n                    regular: true,\n                },\n            },\n        },\n        \"cordova-plugin-cdp-nativebridge\": {\n            acquisition: \"cordova\",\n            regular: true,\n        },\n        \"cordova-plugin-inappbrowser\": {\n            acquisition: \"cordova\",\n            regular: false,\n            subset: {\n                \"@types/cordova-plugin-inappbrowser\": {\n                    acquisition: \"npm:dev\",\n                    default: true,\n                },\n            },\n        },\n        \"cordova-plugin-app-version\": {\n            acquisition: \"cordova\",\n            regular: false,\n            subset: {\n                \"@types/cordova-plugin-app-version\": {\n                    acquisition: \"npm:dev\",\n                    regular: true,\n                },\n            },\n        },\n        \"iscroll\": {\n            acquisition: \"npm\",\n            regular: false,\n            globalExport: \"IScroll\",\n            fileName: \"iscroll-probe\",\n            subset: {\n                \"@types/iscroll\": {\n                    acquisition: \"npm:dev\",\n                    regular: true,\n                },\n            },\n        },\n        \"flipsnap\": {\n            acquisition: \"npm\",\n            regular: false,\n            globalExport: \"Flipsnap\",\n            subset: {\n                \"@types/flipsnap\": {\n                    acquisition: \"npm:dev\",\n                    regular: true,\n                },\n            },\n        },\n    },\n};\n/**\n * ブラウザ環境で動作するデスクトップアプリケーションの既定値\n */\nconst desktopOnBrowser = {\n    // IProjectConfigration\n    projectType: \"desktop\",\n    // IBuildTargetConfigration\n    es: \"es5\",\n    module: \"amd\",\n    env: \"web\",\n    tools: [\"nyc\"],\n};\n/**\n *  electron 環境で動作するデスクトップアプリケーションの既定値\n */\nconst desktopOnElectron = {\n    // IProjectConfigration\n    projectType: \"desktop\",\n    // IBuildTargetConfigration\n    es: \"es2015\",\n    module: \"commonjs\",\n    env: \"electron-renderer\",\n    tools: [\"webpack\", \"nyc\"],\n};\n/**\n * ブラウザ環境で動作するウェブアプリケーションの既定値\n */\nconst webOnBrowser = {\n    // IProjectConfigration\n    projectType: \"web\",\n    // IBuildTargetConfigration\n    es: \"es5\",\n    module: \"amd\",\n    env: \"web\",\n};\n//___________________________________________________________________________________________________________________//\nexports.default = {\n    library: {\n        browser: libraryOnBrowser,\n        node: libraryOnNode,\n        electron: libraryOnElectron,\n        ELECTRON_AVAILABLE: false,\n    },\n    mobile: {\n        browser: mobileOnBrowser,\n    },\n    desctop: {\n        browser: desktopOnBrowser,\n        electron: desktopOnElectron,\n    },\n    web: {\n        browser: webOnBrowser,\n    },\n};\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(17));\n__export(__webpack_require__(6));\n__export(__webpack_require__(7));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__webpack_require__(7);\nconst index_1 = __webpack_require__(5);\nlet _settings = {\n    force: false,\n    verbose: false,\n    silent: false,\n    lang: \"en-US\",\n};\n///////////////////////////////////////////////////////////////////////\n// exports methods:\n/**\n * 設定取得\n *\n * @returns options ログに使用するオプション\n */\nfunction getSettings() {\n    return index_1.deepExtend({}, _settings);\n}\nexports.getSettings = getSettings;\n/**\n * 設定指定\n *\n * @param options ログに使用するオプション\n */\nfunction setSettings(settings) {\n    if (settings) {\n        _settings.force = settings.force || _settings.force;\n        _settings.verbose = settings.verbose || _settings.verbose;\n        _settings.silent = settings.silent || _settings.silent;\n        _settings.targetDir = settings.targetDir || _settings.targetDir;\n        _settings.lang = settings.lang || _settings.lang;\n    }\n    else {\n        _settings = {\n            force: false,\n            verbose: false,\n            silent: false,\n            lang: \"en-US\",\n        };\n    }\n}\nexports.setSettings = setSettings;\n/**\n * ログ出力\n * console.log() と同等\n *\n * @param message        出力メッセージ\n * @param optionalParams 付加情報\n */\nfunction log(message, ...optionalParams) {\n    if (!_settings.silent) {\n        if (0 < optionalParams.length) {\n            console.log(message, optionalParams);\n        }\n        else {\n            console.log(message);\n        }\n    }\n}\nexports.log = log;\n/**\n * 詳細ログ出力\n * console.debug() と同等\n *\n * @param message        出力メッセージ\n * @param optionalParams 付加情報\n */\nfunction debug(message, ...optionalParams) {\n    if (!_settings.silent && _settings.verbose) {\n        if (0 < optionalParams.length) {\n            console.error(\"DEBUG: \" + message, optionalParams);\n        }\n        else {\n            console.error(\"DEBUG: \" + message);\n        }\n    }\n}\nexports.debug = debug;\n/**\n * 検証\n * console.assert() と同等\n *\n * @param test           検証する式\n * @param message        出力メッセージ\n * @param optionalParams 付加情報\n */\nfunction assert(test, message, ...optionalParams) {\n    if (!test) {\n        if (_settings.force) {\n            if (0 < optionalParams.length) {\n                console.warn(message, optionalParams);\n            }\n            else {\n                console.warn(message);\n            }\n        }\n        else {\n            if (0 < optionalParams.length) {\n                console.error(message, optionalParams);\n            }\n            else {\n                console.error(message);\n            }\n            process.exit(1);\n        }\n    }\n}\nexports.assert = assert;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst os = __webpack_require__(22);\nconst child_process_1 = __webpack_require__(23);\nconst cli_spinner_1 = __webpack_require__(24);\nconst which = __webpack_require__(25);\nconst deepExtend = __webpack_require__(26);\nexports.deepExtend = deepExtend;\nconst settings_1 = __webpack_require__(6);\n///////////////////////////////////////////////////////////////////////\n// exports methods:\n/**\n * Handle command line error and kill process.\n * When the application received error from cli, please call this method.\n *\n * @param {String} error  error information.\n */\nfunction handleError(error) {\n    settings_1.assert(false, error);\n}\nexports.handleError = handleError;\n//___________________________________________________________________________________________________________________//\n/**\n * Get spinner instance.\n * CLI helper.\n *\n * @param  {String}  [format]  spinner format string.\n * @param  {Number}  [index]   spinner index defined by cli-spinner. (default: random [0-29])\n * @return {Spinner} cli-spinner instance.\n */\nfunction getSpinner(format, index) {\n    const spinners = [\n        \"|/-\\\\\",\n        \"┤┘┴└├┌┬┐\",\n        \"◢◣◤◥\",\n        \"▌▀▐▄\",\n        \"▉▊▋▌▍▎▏▎▍▌▋▊▉\",\n        \"▁▃▄▅▆▇█▇▆▅▄▃\",\n        \"☱☲☴\",\n        \".oO@*\",\n        \"◐◓◑◒\",\n        ////\n        \"◡◡ ⊙⊙ ◠◠\",\n        \"■□▪▫\",\n        \"←↖↑↗→↘↓↙\",\n        \".oO°Oo.\",\n    ];\n    const fmt = format || \"%s\";\n    const spinner = new cli_spinner_1.Spinner(fmt);\n    const idx = (null != index && 0 <= index && index < 14) ? index : Math.floor(Math.random() * 10);\n    spinner.setSpinnerString(spinners[idx]);\n    return spinner;\n}\nexports.getSpinner = getSpinner;\n/**\n * Execute command line by spawn.\n * call spawn. if error occured, cui is killed proccess.\n *\n * @param   {String}               command    main command. ex) \"cordova\"\n * @param   {String[]}             args       command args. ex) [\"plugin\", \"add\", pluginName]\n * @param   {ExecCommandOptions}   [options]  cli-spinner\"s options.\n * @returns {Number} error code\n */\nfunction execCommand(command, args, options) {\n    return new Promise((resolve, reject) => {\n        const opt = deepExtend({}, {\n            stdio: \"inherit\",\n            spinner: { format: \"%s\" },\n            stdout: (data) => { },\n            stderr: (data) => { },\n        }, options);\n        // on win32, command and args need to be quoted if containing spaces\n        const quoteIfNeeded = (str) => {\n            if (\"win32\" === os.platform() && str.includes(\" \")) {\n                str = \"\\\"\" + str + \"\\\"\";\n                opt.shell = true;\n            }\n            return str;\n        };\n        which(command, (error, resolvedCommand) => {\n            if (error) {\n                handleError(JSON.stringify(error));\n            }\n            const spinner = opt.spinner ? getSpinner(opt.spinner.format, opt.spinner.index) : null;\n            if (spinner) {\n                spinner.start();\n            }\n            resolvedCommand = quoteIfNeeded(resolvedCommand);\n            args = args.map(quoteIfNeeded);\n            const child = child_process_1.spawn(resolvedCommand, args, opt)\n                .on(\"error\", handleError)\n                .on(\"close\", (code) => {\n                if (spinner) {\n                    spinner.stop(true);\n                }\n                resolve(code);\n            });\n            if (\"pipe\" === opt.stdio) {\n                child.stdout.on(\"data\", (data) => {\n                    opt.stdout(data.toString());\n                });\n                child.stderr.on(\"data\", (data) => {\n                    opt.stderr(data.toString());\n                });\n            }\n        });\n    });\n}\nexports.execCommand = execCommand;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(9);\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cdp_lib_1 = __webpack_require__(0);\nconst command_parser_1 = __webpack_require__(10);\nconst prompt_library_1 = __webpack_require__(12);\nconst prompt_mobile_1 = __webpack_require__(13);\nconst prompt_desktop_1 = __webpack_require__(14);\nconst prompt_web_1 = __webpack_require__(15);\nconst cdp_doc_1 = __webpack_require__(16);\nconst chalk = cdp_lib_1.Utils.chalk;\nfunction getCreateInquirer(cmdInfo) {\n    switch (cmdInfo.target) {\n        case \"library\":\n            return new prompt_library_1.PromptLibrary();\n        case \"mobile\":\n            return new prompt_mobile_1.PromptMobileApp();\n        case \"desktop\":\n            return new prompt_desktop_1.PromptDesktopApp();\n        case \"web\":\n            return new prompt_web_1.PromptWebApp();\n        default:\n            console.error(chalk.red(\"unsupported target: \" + cmdInfo.target));\n            process.exit(1);\n    }\n}\nfunction inquireCreate(cmdInfo) {\n    const inquirer = getCreateInquirer(cmdInfo);\n    inquirer.prompting(cmdInfo)\n        .then((config) => {\n        // execute\n        return cdp_lib_1.default.execute(config);\n    })\n        .then(() => {\n        console.log(chalk.green(inquirer.lang.finished[cmdInfo.action]));\n    })\n        .catch((reason) => {\n        if (\"string\" !== typeof reason) {\n            if (null != reason.message) {\n                reason = reason.message;\n            }\n            else {\n                reason = JSON.stringify(reason);\n            }\n        }\n        console.error(chalk.red(reason));\n    })\n        .then(() => {\n        // NOTE: es6 promise's always block.\n    });\n}\nfunction browseDoc(prt) {\n    cdp_doc_1.default.execute(prt).then((resolve) => {\n        console.log(\"Automaticaly web browser opened and you can browse cdp documents.\");\n        console.log(\"To quit browsing, press Ctrl + C.\");\n    })\n        .catch((reject) => {\n        console.log(\"Default port 8080 is already used. Please use another port, for example $ cdp doc -p 3000\");\n    });\n}\nfunction main() {\n    process.title = \"cdp\";\n    const cmdInfo = command_parser_1.CommandParser.parse(process.argv);\n    const prt = cmdInfo.cliOptions.port;\n    switch (cmdInfo.action) {\n        case \"create\":\n            inquireCreate(cmdInfo);\n            break;\n        case \"doc\":\n            browseDoc(prt);\n            break;\n        default:\n            console.error(chalk.red(cmdInfo.action + \" command: under construction.\"));\n            process.exit(1);\n    }\n}\nexports.main = main;\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(2);\nconst commander = __webpack_require__(11);\nconst cdp_lib_1 = __webpack_require__(0);\nconst fs = cdp_lib_1.Utils.fs;\nconst chalk = cdp_lib_1.Utils.chalk;\n//___________________________________________________________________________________________________________________//\n/**\n * @class CommandParser\n * @brief コマンドラインパーサー\n */\nclass CommandParser {\n    ///////////////////////////////////////////////////////////////////////\n    // public static methods\n    /**\n     * コマンドラインのパース\n     *\n     * @param  {String} argv       引数を指定\n     * @param  {Object} [options]  オプションを指定\n     * @returns {ICommandLineInfo}\n     */\n    static parse(argv, options) {\n        const cmdline = {\n            pkgDir: this.getPackageDirectory(argv),\n        };\n        let pkg;\n        try {\n            pkg = JSON.parse(fs.readFileSync(path.join(cmdline.pkgDir, \"package.json\"), \"utf8\").toString());\n        }\n        catch (error) {\n            throw Error(\"package.json parse error: \" + error.message);\n        }\n        commander\n            .version(pkg.version)\n            .option(\"-f, --force\", \"Continue execution even if in error situation\")\n            .option(\"-t, --targetdir <path>\", \"Specify project target directory\")\n            .option(\"-c, --config <path>\", \"Specify config file path\")\n            .option(\"-v, --verbose\", \"Show debug messages.\")\n            .option(\"-s, --silent\", \"Run as silent mode.\")\n            .option(\"--no-minify\", \"Not minified on release.\")\n            .option(\"-p, --port <port>\", \"Set local server port when browsing document\");\n        commander\n            .command(\"init\")\n            .description(\"init project\")\n            .action(() => {\n            cmdline.action = \"init\";\n        })\n            .on(\"--help\", () => {\n            console.log(chalk.green(\"  Examples:\"));\n            console.log(\"\");\n            console.log(chalk.green(\"    $ cdp init\"));\n            console.log(\"\");\n        });\n        commander\n            .command(\"create <target>\")\n            .description(\"create boilerplate for 'library, module' | 'mobile, app' | 'desktop' | 'web'\")\n            .action((target) => {\n            if (/^(module|app|library|mobile|desktop|web)$/i.test(target)) {\n                cmdline.action = \"create\";\n                cmdline.target = target;\n                if (\"module\" === cmdline.target) {\n                    cmdline.target = \"library\";\n                }\n                else if (\"app\" === cmdline.target) {\n                    cmdline.target = \"mobile\";\n                }\n            }\n            else {\n                console.log(chalk.red.underline(\"  unsupported target: \" + target));\n                this.showHelp();\n            }\n        })\n            .on(\"--help\", () => {\n            console.log(chalk.green(\"  Examples:\"));\n            console.log(\"\");\n            console.log(chalk.green(\"    $ cdp create library\"));\n            console.log(chalk.green(\"    $ cdp create mobile\"));\n            console.log(chalk.green(\"    $ cdp create app -c setting.json\"));\n            console.log(\"\");\n        });\n        commander\n            .command(\"*\", null, { noHelp: true })\n            .action((cmd) => {\n            console.log(chalk.red.underline(\"  unsupported command: \" + cmd));\n            this.showHelp();\n        });\n        commander\n            .command(\"doc\")\n            .description(\"show document with browser\")\n            .action(() => {\n            cmdline.action = \"doc\";\n        })\n            .on(\"--help\", () => {\n            console.log(chalk.green(\"  Examples:\"));\n            console.log(\"\");\n            console.log(chalk.green(\"    $ cdp doc -p <port number>\"));\n            console.log(chalk.green(\"    $ cdp doc <<in case of using default port: 8080>>\"));\n            console.log(\"\");\n        });\n        commander.parse(argv);\n        if (argv.length <= 2) {\n            this.showHelp();\n        }\n        cmdline.cliOptions = this.toCommandLineOptions(commander);\n        return cmdline;\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private static methods\n    /**\n     * CLI のインストールディレクトリを取得\n     *\n     * @param  {String[]} argv 引数\n     * @return {String} インストールディレクトリ\n     */\n    static getPackageDirectory(argv) {\n        // Added: Issue #4: get the real path of exec, because get the path of symbolic link of exec on Mac.\n        const execRealPath = fs.realpathSync(argv[1]);\n        //\n        const execDir = path.dirname(execRealPath);\n        return path.join(execDir, \"..\");\n    }\n    /**\n     * CLI option を ICommandLineOptions に変換\n     *\n     * @param  {Object} commander parse 済み comannder インスタンス\n     * @return {ICommandLineOptions} option オブジェクト\n     */\n    static toCommandLineOptions(command) {\n        return {\n            force: !!command.force,\n            targetDir: command.targetdir,\n            config: command.config,\n            verbose: !!command.verbose,\n            silent: !!command.silent,\n            minify: command.minify,\n            port: command.port,\n        };\n    }\n    /**\n     * ヘルプ表示して終了\n     */\n    static showHelp() {\n        const inform = (text) => {\n            return chalk.green(text);\n        };\n        commander.outputHelp(inform);\n        process.exit(1);\n    }\n}\nexports.CommandParser = CommandParser;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"commander\");\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst inquirer = __webpack_require__(3);\nconst cdp_lib_1 = __webpack_require__(0);\nconst prompt_base_1 = __webpack_require__(1);\nconst default_config_1 = __webpack_require__(4);\nconst $ = cdp_lib_1.Utils.$;\nconst chalk = cdp_lib_1.Utils.chalk;\nconst semverRegex = cdp_lib_1.Utils.semverRegex;\nconst libConfig = default_config_1.default.library;\n/**\n * @class PromptLibrary\n * @brief ライブラリモジュール用 Inquire クラス\n */\nclass PromptLibrary extends prompt_base_1.PromptBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprements abstruct methods\n    /**\n     * プロジェクト設定項目の取得\n     */\n    get questions() {\n        return [\n            // project common settnigs (IProjectConfigration)\n            {\n                type: \"input\",\n                name: \"projectName\",\n                message: this.lang.prompt.common.projectName.message,\n                default: this.answers.projectName || \"cool-project-name\",\n                validate: (value) => {\n                    if (!/^[a-zA-Z0-9/@._-]+$/.test(value)) {\n                        return this.lang.prompt.common.projectName.invalidMessage;\n                    }\n                    else {\n                        return true;\n                    }\n                },\n            },\n            {\n                type: \"input\",\n                name: \"version\",\n                message: this.lang.prompt.common.version.message,\n                default: this.answers.version || \"0.0.1\",\n                filter: (value) => {\n                    if (semverRegex().test(value)) {\n                        return semverRegex().exec(value)[0];\n                    }\n                    else {\n                        return value;\n                    }\n                },\n                validate: (value) => {\n                    if (semverRegex().test(value)) {\n                        return true;\n                    }\n                    else {\n                        return this.lang.prompt.common.version.invalidMessage;\n                    }\n                },\n            },\n            {\n                type: \"list\",\n                name: \"license\",\n                message: this.lang.prompt.common.license.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.license.choices.apache2,\n                        value: \"Apache-2.0\",\n                    },\n                    {\n                        name: this.lang.prompt.common.license.choices.mit,\n                        value: \"MIT\",\n                    },\n                    {\n                        name: this.lang.prompt.common.license.choices.proprietary,\n                        value: \"NONE\",\n                    }\n                ],\n                default: this.answers.license || \"NONE\",\n            },\n            // library settnigs (IBuildTargetConfigration)\n            {\n                type: \"list\",\n                name: \"env\",\n                message: this.lang.prompt.library.env.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.env.choices.browser,\n                        value: \"web\",\n                    },\n                    {\n                        name: this.lang.prompt.common.env.choices.node,\n                        value: \"node\",\n                    },\n                    new inquirer.Separator(),\n                    {\n                        name: this.lang.prompt.common.env.choices.electron + this.LIMITATION(),\n                        value: \"electron\",\n                    },\n                    {\n                        name: this.lang.prompt.common.env.choices.electronRenderer + this.LIMITATION(),\n                        value: \"electron-renderer\",\n                    }\n                ],\n                filter: (value) => {\n                    if (libConfig.ELECTRON_AVAILABLE) {\n                        return value;\n                    }\n                    else if (\"electron\" === value) {\n                        return \"node\";\n                    }\n                    else if (\"electron-renderer\" === value) {\n                        return \"web\";\n                    }\n                    else {\n                        return value;\n                    }\n                },\n                default: this.answers.env || \"web\",\n            },\n            // base structure\n            {\n                type: \"list\",\n                name: \"extraSettings\",\n                message: this.lang.prompt.common.extraSettings.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.extraSettings.choices.recommended,\n                        value: \"recommended\",\n                    },\n                    {\n                        name: this.lang.prompt.common.extraSettings.choices.custom,\n                        value: \"custom\",\n                    },\n                ],\n                default: this.answers.extraSettings || \"recommended\",\n            },\n            // library settnigs (custom: module)\n            {\n                type: \"list\",\n                name: \"module\",\n                message: this.lang.prompt.common.module.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.module.choices.none,\n                        value: \"none\",\n                    },\n                    {\n                        name: this.lang.prompt.common.module.choices.commonjs,\n                        value: \"commonjs\",\n                    },\n                    {\n                        name: this.lang.prompt.common.module.choices.umd,\n                        value: \"umd\",\n                    },\n                ],\n                default: (\"amd\" !== this.answers.module) ? (this.answers.module || \"commonjs\") : \"commonjs\",\n                when: (answers) => {\n                    return \"custom\" === answers.extraSettings && /^(node|electron)$/i.test(answers.env);\n                },\n            },\n            {\n                type: \"list\",\n                name: \"module\",\n                message: this.lang.prompt.common.module.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.module.choices.none,\n                        value: \"none\",\n                    },\n                    {\n                        name: this.lang.prompt.common.module.choices.amd,\n                        value: \"amd\",\n                    },\n                    {\n                        name: this.lang.prompt.common.module.choices.umd,\n                        value: \"umd\",\n                    },\n                ],\n                default: (\"commonjs\" !== this.answers.module) ? (this.answers.module || \"amd\") : \"amd\",\n                when: (answers) => {\n                    return \"custom\" === answers.extraSettings && \"web\" === answers.env;\n                },\n            },\n            {\n                type: \"list\",\n                name: \"module\",\n                message: this.lang.prompt.common.module.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.module.choices.none,\n                        value: \"none\",\n                    },\n                    {\n                        name: this.lang.prompt.common.module.choices.commonjs,\n                        value: \"commonjs\",\n                    },\n                    {\n                        name: this.lang.prompt.common.module.choices.amd,\n                        value: \"amd\",\n                    },\n                    {\n                        name: this.lang.prompt.common.module.choices.umd,\n                        value: \"umd\",\n                    },\n                ],\n                default: this.answers.module || \"commonjs\",\n                when: (answers) => {\n                    return \"custom\" === answers.extraSettings && \"electron-renderer\" === answers.env;\n                },\n            },\n            // library settnigs (custom: es)\n            {\n                type: \"list\",\n                name: \"es\",\n                message: this.lang.prompt.common.es.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.es.choices.es5,\n                        value: \"es5\",\n                    },\n                    {\n                        name: this.lang.prompt.common.es.choices.es2015,\n                        value: \"es2015\",\n                    },\n                ],\n                default: this.answers.es || (\"web\" === this.answers.env ? \"es5\" : \"es2015\"),\n                when: (answers) => {\n                    return \"custom\" === answers.extraSettings;\n                },\n            },\n        ];\n    }\n    /**\n     * プロジェクト設定の確認\n     *\n     * @param  {IAnswerSchema} answers 回答結果\n     * @return {IProjectConfigration} 設定値を返却\n     */\n    displaySettingsByAnswers(answers) {\n        const config = (() => {\n            switch (answers.env) {\n                case \"web\":\n                    return $.extend({}, libConfig.browser, answers);\n                case \"node\":\n                    return $.extend({}, libConfig.node, answers);\n                case \"electron\":\n                    return $.extend({}, libConfig.electron, answers);\n                case \"electron-renderer\":\n                    return $.extend({}, libConfig.electron, answers);\n                default:\n                    console.error(chalk.red(\"unsupported target: \" + answers.env));\n                    process.exit(1);\n            }\n        })();\n        const items = [\n            { name: \"extraSettings\", recommend: false },\n            { name: \"projectName\", recommend: false },\n            { name: \"version\", recommend: false },\n            { name: \"license\", recommend: false },\n            { name: \"env\", recommend: false },\n            { name: \"module\", recommend: true },\n            { name: \"es\", recommend: true },\n        ];\n        try {\n            items.forEach((item) => {\n                const color = (item.recommend && \"recommended\" === answers.extraSettings) ? \"yellow\" : undefined;\n                console.log(this.config2description(config, item.name, color));\n            });\n        }\n        catch (error) {\n            console.error(chalk.red(\"error: \" + JSON.stringify(error, null, 4)));\n            process.exit(1);\n        }\n        return config;\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // private methods:\n    /**\n     * electron が有効出ない場合の補足文字を取得\n     */\n    LIMITATION() {\n        return libConfig.ELECTRON_AVAILABLE ? \"\" : \" \" + this.lang.prompt.common.stilNotAvailable;\n    }\n}\nexports.PromptLibrary = PromptLibrary;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst inquirer = __webpack_require__(3);\nconst cdp_lib_1 = __webpack_require__(0);\nconst prompt_base_1 = __webpack_require__(1);\nconst default_config_1 = __webpack_require__(4);\nconst $ = cdp_lib_1.Utils.$;\nconst _ = cdp_lib_1.Utils._;\nconst chalk = cdp_lib_1.Utils.chalk;\nconst semverRegex = cdp_lib_1.Utils.semverRegex;\nconst mobileConfig = default_config_1.default.mobile;\nconst EXTERNAL_DEFAULTS = (() => {\n    const defaults = [];\n    Object.keys(mobileConfig.browser.external)\n        .forEach((target) => {\n        if (mobileConfig.browser.external[target].regular) {\n            defaults.push(target);\n        }\n    });\n    return defaults;\n})();\n/**\n * @class PromptMobileApp\n * @brief モバイルアプリ用 Inquire クラス\n */\nclass PromptMobileApp extends prompt_base_1.PromptBase {\n    ///////////////////////////////////////////////////////////////////////\n    // imprements abstruct methods\n    /**\n     * プロジェクト設定項目の取得\n     */\n    get questions() {\n        const platforms_default = this.answers.platforms\n            ? this.answers.platforms.slice()\n            : mobileConfig.browser.platforms;\n        delete this.answers.platforms;\n        const projectStructure_default = this.answers.projectStructure\n            ? this.answers.projectStructure.slice()\n            : mobileConfig.browser.projectStructure;\n        delete this.answers.projectStructure;\n        const external_default = this.answers.external\n            ? this.answers.external.slice()\n            : EXTERNAL_DEFAULTS;\n        delete this.answers.external;\n        return [\n            // project common settnigs (IProjectConfigration)\n            {\n                type: \"input\",\n                name: \"appName\",\n                message: this.lang.prompt.mobile.appName.message,\n                default: this.answers.appName || \"Cool App Name\",\n                validate: (value) => {\n                    if (/^.*[(\\\\|/|:|*|?|\"|<|>||)].*$/.test(value)) {\n                        return this.lang.prompt.mobile.appName.invalidMessage;\n                    }\n                    else {\n                        return true;\n                    }\n                },\n            },\n            {\n                type: \"input\",\n                name: \"projectName\",\n                message: this.lang.prompt.common.projectName.message,\n                default: (answers) => {\n                    return _.trim(_.dasherize(answers.appName.toLowerCase()), \"-\");\n                },\n                validate: (value) => {\n                    if (!/^[a-zA-Z0-9_-]*$/.test(value)) {\n                        return this.lang.prompt.common.projectName.invalidMessage;\n                    }\n                    else {\n                        return true;\n                    }\n                },\n            },\n            {\n                type: \"input\",\n                name: \"appId\",\n                message: this.lang.prompt.mobile.appId.message,\n                default: this.answers.appId || \"org.cool.appname\",\n                filter: (value) => {\n                    return value.toLowerCase();\n                },\n            },\n            {\n                type: \"input\",\n                name: \"version\",\n                message: this.lang.prompt.common.version.message,\n                default: this.answers.version || \"0.0.1\",\n                filter: (value) => {\n                    if (semverRegex().test(value)) {\n                        return semverRegex().exec(value)[0];\n                    }\n                    else {\n                        return value;\n                    }\n                },\n                validate: (value) => {\n                    if (semverRegex().test(value)) {\n                        return true;\n                    }\n                    else {\n                        return this.lang.prompt.common.version.invalidMessage;\n                    }\n                },\n            },\n            {\n                type: \"list\",\n                name: \"license\",\n                message: this.lang.prompt.common.license.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.license.choices.apache2,\n                        value: \"Apache-2.0\",\n                    },\n                    {\n                        name: this.lang.prompt.common.license.choices.mit,\n                        value: \"MIT\",\n                    },\n                    {\n                        name: this.lang.prompt.common.license.choices.proprietary,\n                        value: \"NONE\",\n                    },\n                ],\n                default: this.answers.license || \"NONE\",\n            },\n            {\n                type: \"checkbox\",\n                name: \"platforms\",\n                message: this.lang.prompt.mobile.platforms.message,\n                choices: [\n                    {\n                        name: \"android\",\n                        checked: (0 <= platforms_default.indexOf(\"android\")),\n                    },\n                    {\n                        name: \"ios\",\n                        checked: (0 <= platforms_default.indexOf(\"ios\")),\n                    },\n                ],\n            },\n            {\n                type: \"list\",\n                name: \"extraSettings\",\n                message: this.lang.prompt.common.extraSettings.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.common.extraSettings.choices.recommended,\n                        value: \"recommended\",\n                    },\n                    {\n                        name: this.lang.prompt.common.extraSettings.choices.custom,\n                        value: \"custom\",\n                    },\n                ],\n                default: this.answers.extraSettings || \"recommended\",\n            },\n            {\n                type: \"checkbox\",\n                name: \"projectStructure\",\n                message: this.lang.prompt.mobile.projectStructure.message,\n                choices: [\n                    {\n                        name: this.lang.prompt.mobile.projectStructure.lib,\n                        value: \"lib\",\n                        checked: (0 <= projectStructure_default.indexOf(\"lib\")),\n                    },\n                    {\n                        name: this.lang.prompt.mobile.projectStructure.porting,\n                        value: \"porting\",\n                        checked: (0 <= projectStructure_default.indexOf(\"porting\")),\n                    },\n                ],\n                when: (answers) => {\n                    return \"custom\" === answers.extraSettings;\n                },\n            },\n            {\n                type: \"checkbox\",\n                name: \"external\",\n                message: this.lang.prompt.mobile.external.message,\n                paginated: false,\n                choices: [\n                    new inquirer.Separator(this.lang.prompt.mobile.external.separator.cordova),\n                    {\n                        name: this.lang.prompt.mobile.external.modules[\"cordova-plugin-cdp-nativebridge\"],\n                        value: \"cordova-plugin-cdp-nativebridge\",\n                        checked: (0 <= external_default.indexOf(\"cordova-plugin-cdp-nativebridge\")),\n                        disabled: (answers) => {\n                            if (!answers.platforms || answers.platforms.length <= 0) {\n                                return this.lang.prompt.mobile.external.noCordovaMessage;\n                            }\n                        },\n                    },\n                    {\n                        name: this.lang.prompt.mobile.external.modules[\"cordova-plugin-inappbrowser\"],\n                        value: \"cordova-plugin-inappbrowser\",\n                        checked: (0 <= external_default.indexOf(\"cordova-plugin-inappbrowser\")),\n                        disabled: (answers) => {\n                            if (!answers.platforms || answers.platforms.length <= 0) {\n                                return this.lang.prompt.mobile.external.noCordovaMessage;\n                            }\n                        },\n                    },\n                    {\n                        name: this.lang.prompt.mobile.external.modules[\"cordova-plugin-app-version\"],\n                        value: \"cordova-plugin-app-version\",\n                        checked: (0 <= external_default.indexOf(\"cordova-plugin-app-version\")),\n                        disabled: (answers) => {\n                            if (!answers.platforms || answers.platforms.length <= 0) {\n                                return this.lang.prompt.mobile.external.noCordovaMessage;\n                            }\n                        },\n                    },\n                    new inquirer.Separator(this.lang.prompt.mobile.external.separator.utils),\n                    /* tslint:disable:no-string-literal */\n                    {\n                        name: this.lang.prompt.mobile.external.modules[\"hogan.js\"],\n                        value: \"hogan.js\",\n                        checked: (0 <= external_default.indexOf(\"hogan.js\")),\n                    },\n                    {\n                        name: this.lang.prompt.mobile.external.modules[\"hammerjs\"],\n                        value: \"hammerjs\",\n                        checked: (0 <= external_default.indexOf(\"hammerjs\")),\n                    },\n                    {\n                        name: this.lang.prompt.mobile.external.modules[\"iscroll\"],\n                        value: \"iscroll\",\n                        checked: (0 <= external_default.indexOf(\"iscroll\")),\n                    },\n                    {\n                        name: this.lang.prompt.mobile.external.modules[\"flipsnap\"],\n                        value: \"flipsnap\",\n                        checked: (0 <= external_default.indexOf(\"flipsnap\")),\n                    },\n                ],\n                when: (answers) => {\n                    return \"custom\" === answers.extraSettings;\n                },\n            },\n        ];\n    }\n    /**\n     * プロジェクト設定の確認\n     *\n     * @param  {IAnswerSchema} answers 回答結果\n     * @return {IProjectConfigration} 設定値を返却\n     */\n    displaySettingsByAnswers(answers) {\n        const config = (() => {\n            const defaults = $.extend({}, mobileConfig.browser);\n            const lookup = defaults.external;\n            delete defaults.external;\n            const _config = $.extend({}, defaults, {\n                external: EXTERNAL_DEFAULTS,\n                dependencies: [],\n                devDependencies: [],\n                cordova_plugin: [],\n                resource_addon: [],\n            }, answers);\n            try {\n                const resolveDependencies = (moduleName, info) => {\n                    switch (info.acquisition) {\n                        case \"npm\":\n                            _config.dependencies.push({\n                                name: moduleName,\n                                alias: info.alias,\n                                globalExport: info.globalExport,\n                                venderName: info.venderName,\n                                fileName: info.fileName,\n                            });\n                            return true;\n                        case \"npm:dev\":\n                            _config.devDependencies.push({ name: moduleName });\n                            return true;\n                        case \"cordova\":\n                            if (0 < _config.platforms.length) {\n                                _config.cordova_plugin.push({ name: moduleName });\n                                return true;\n                            }\n                            else {\n                                return false;\n                            }\n                        case \"resource\":\n                            _config.resource_addon.push({\n                                name: moduleName,\n                                alias: info.alias,\n                                globalExport: info.globalExport,\n                                venderName: info.venderName,\n                                fileName: info.fileName,\n                            });\n                            return true;\n                        default:\n                            return false;\n                    }\n                };\n                _config.external.forEach((top) => {\n                    const info = lookup[top];\n                    const valid = resolveDependencies(top, info);\n                    if (valid && info.subset) {\n                        Object.keys(info.subset)\n                            .forEach((sub) => {\n                            resolveDependencies(sub, info.subset[sub]);\n                        });\n                    }\n                });\n            }\n            catch (error) {\n                console.error(chalk.red(\"error: \" + JSON.stringify(error, null, 4)));\n                process.exit(1);\n            }\n            delete _config.external;\n            return _config;\n        })();\n        const items = [\n            { name: \"extraSettings\", fixed: false },\n            { name: \"appName\", fixed: false },\n            { name: \"projectName\", fixed: false },\n            { name: \"appId\", fixed: false },\n            { name: \"version\", fixed: false },\n            { name: \"license\", fixed: false },\n            { name: \"module\", fixed: true },\n            { name: \"es\", fixed: true },\n        ];\n        try {\n            items.forEach((item) => {\n                const color = (item.fixed) ? \"yellow\" : undefined;\n                console.log(this.config2description(config, item.name, color));\n            });\n        }\n        catch (error) {\n            console.error(chalk.red(\"error: \" + JSON.stringify(error, null, 4)));\n            process.exit(1);\n        }\n        // platforms\n        const platformInfo = (0 < config.platforms.length)\n            ? config.platforms.join(\", \")\n            : this.lang.settings.mobile.platforms.none;\n        console.log(\"\\n\" + this.lang.settings.mobile.platforms.label + chalk.cyan(platformInfo));\n        const COLOR = (\"recommended\" === answers.extraSettings) ? \"yellow\" : \"cyan\";\n        // additional project structure\n        if (0 < config.projectStructure.length) {\n            const projectStructure = config.projectStructure.join(\", \");\n            console.log(\"\\n\" + this.lang.settings.mobile.projectStructure.label + chalk[COLOR](projectStructure));\n        }\n        // additional cordova plugin\n        if (0 < config.cordova_plugin.length) {\n            console.log(\"\\n\" + this.lang.settings.mobile.cordovaPlugins.label);\n            config.cordova_plugin.forEach((info) => {\n                console.log(\"    \" + chalk[COLOR](info.name));\n            });\n        }\n        // additional dependency\n        if (0 < config.dependencies.length) {\n            console.log(\"\\n\" + this.lang.settings.mobile.dependencies.label);\n            config.resource_addon.forEach((info) => {\n                console.log(\"    \" + chalk[COLOR](info.name));\n            });\n            config.dependencies.forEach((info) => {\n                console.log(\"    \" + chalk[COLOR](info.name));\n            });\n        }\n        return config;\n    }\n}\nexports.PromptMobileApp = PromptMobileApp;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* tslint:disable:no-unused-variable no-unused-vars */\n/* eslint-disable no-unused-vars */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cdp_lib_1 = __webpack_require__(0);\nconst prompt_base_1 = __webpack_require__(1);\nconst chalk = cdp_lib_1.Utils.chalk;\n/**\n * @class PromptDesktopApp\n * @brief デスクトップアプリ用 Inquire クラス\n */\nclass PromptDesktopApp extends prompt_base_1.PromptBase {\n    ///////////////////////////////////////////////////////////////////////\n    // public methods\n    /**\n     * エントリ\n     */\n    prompting(cmdInfo) {\n        return new Promise((resolve, reject) => {\n            reject(\"desktop app prompting, under construction.\");\n        });\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // imprements abstruct methods\n    /**\n     * プロジェクト設定項目の取得\n     */\n    get questions() {\n        // TODO:\n        return [];\n    }\n    /**\n     * プロジェクト設定の確認\n     *\n     * @param  {IAnswerSchema} answers 回答結果\n     * @return {IProjectConfigration} 設定値を返却\n     */\n    displaySettingsByAnswers(answers) {\n        // TODO: show\n        return null;\n    }\n}\nexports.PromptDesktopApp = PromptDesktopApp;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* tslint:disable:no-unused-variable no-unused-vars */\n/* eslint-disable no-unused-vars */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cdp_lib_1 = __webpack_require__(0);\nconst prompt_base_1 = __webpack_require__(1);\nconst chalk = cdp_lib_1.Utils.chalk;\n/**\n * @class PromptWebApp\n * @brief ウェブアプリ用 Inquire クラス\n */\nclass PromptWebApp extends prompt_base_1.PromptBase {\n    ///////////////////////////////////////////////////////////////////////\n    // public methods\n    /**\n     * エントリ\n     */\n    prompting(cmdInfo) {\n        return new Promise((resolve, reject) => {\n            reject(\"web app prompting, under construction.\");\n        });\n    }\n    ///////////////////////////////////////////////////////////////////////\n    // imprements abstruct methods\n    /**\n     * プロジェクト設定項目の取得\n     */\n    get questions() {\n        // TODO:\n        return [];\n    }\n    /**\n     * プロジェクト設定の確認\n     *\n     * @param  {IAnswerSchema} answers 回答結果\n     * @return {IProjectConfigration} 設定値を返却\n     */\n    displaySettingsByAnswers(answers) {\n        // TODO: show\n        return null;\n    }\n}\nexports.PromptWebApp = PromptWebApp;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Utils = __webpack_require__(5);\n/**\n * @class CdpDoc\n * @brief TODO:\n */\nclass CDPDoc {\n    ///////////////////////////////////////////////////////////////////////\n    // pubic methods:\n    /**\n     * main command\n     */\n    static execute(prt) {\n        return Utils.launchLocalServer(prt)\n            .then(() => {\n            return Utils.launchBrowser(prt);\n        });\n    }\n}\nexports.default = CDPDoc;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = __webpack_require__(2);\n// import { execCommand } from \"./tools\";\nconst opn = __webpack_require__(18);\nconst express = __webpack_require__(19);\nconst http = __webpack_require__(20); // Node.jsのserver.on('error')を使うためにインポート\nconst url = __webpack_require__(21);\nlet hostName = \"http://localhost:\";\nconst DEFAULT_PORT = 8080;\nfunction launchBrowser(prt) {\n    let prtNumber = Number.parseInt(prt);\n    prtNumber = prtNumber || DEFAULT_PORT;\n    hostName += String(prtNumber);\n    const hostUrl = url.parse(hostName, true);\n    return opn(hostUrl.href);\n}\nexports.launchBrowser = launchBrowser;\nfunction launchLocalServer(prt) {\n    return new Promise((resolve, reject) => {\n        const app = express();\n        const htmlRoot = path.join(__dirname, \"..\", \"root\");\n        app.use(express.static(htmlRoot));\n        let prtNumber = Number.parseInt(prt);\n        prtNumber = prtNumber || DEFAULT_PORT;\n        const server = http.createServer(app);\n        server.on(\"error\", (e) => {\n            const error_json_string = JSON.stringify(e); // 例外の内容を JSON 文字列（JSON全体がコーテーションで囲まれている）で取得\n            const error_js_object = JSON.parse(error_json_string); // JSON文字列を JavaScriptオブジェクトに変換\n            // console.log(error_js_object);       // { code: 'EADDRINUSE', errno: 'EADDRINUSE', ... , port: 8080 }\n            // console.log(error_js_object.errno); // \"EADDRINUSE\"\n            if (error_js_object.errno === \"EADDRINUSE\") {\n                // console.log(\"'EADDRINUSE' error happened!\");     // debug message\n                return reject();\n            }\n            else {\n                console.log(\"Unknown error except 'EADDRINUSE (default prot used)' happend!\"); // Process on command pronpt will stop.\n            }\n        });\n        server.listen(prtNumber, () => {\n            return resolve();\n        });\n    });\n}\nexports.launchLocalServer = launchLocalServer;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"opn\");\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"express\");\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"http\");\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"url\");\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"os\");\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"child_process\");\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"cli-spinner\");\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"which\");\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"deep-extend\");\n\n/***/ })\n/******/ ]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}